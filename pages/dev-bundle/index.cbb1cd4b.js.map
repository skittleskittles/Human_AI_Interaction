{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AACA;AACA;AACA;AAOA;AAEA,IAAI,YAAY,CAAA,GAAA,uBAAgB,AAAD;AAC/B,IAAI,UAAU,cAAc,KAAK,WAC/B,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,GAAG,OAAO,UAAU,cAAc;AAE9D,IAAI,UAAU,UAAU,KAAK,WAC3B,CAAA,GAAA,qBAAW,AAAD,EAAE,WAAW,GAAG,OAAO,UAAU,UAAU;AAEvD,IAAI,UAAU,WAAW,KAAK,WAC5B,CAAA,GAAA,qBAAW,AAAD,EAAE,WAAW,GAAG,OAAO,UAAU,WAAW;AAExD,IAAI,UAAU,OAAO,KAAK,WACxB,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,GAAG,OAAO,UAAU,OAAO;AAGhD,gBAAgB;AAChB,SAAS,SAAS,IAAI;IACpB,EAAE;IACF,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,IAAI,GACzB,CAAA,GAAA,mBAAM,AAAD,EAAE,SAAS,GAAG,CAAC,4DAA4D,CAAC;SAC5E,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,IAAI,GAChC,CAAA,GAAA,mBAAM,AAAD,EAAE,SAAS,GAAG,CAAC,wDAAwD,CAAC;SACxE,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,IAAI,GAChC,CAAA,GAAA,mBAAM,AAAD,EAAE,SAAS,GAAG,CAAC,8DAA8D,CAAC;IAGrF,yEAAyE;IACzE,MAAM,UAAU,MAAM,IAAI,CAAC;QAAE,QAAQ,CAAA,GAAA,qBAAW,AAAD,EAAE,WAAW;IAAC,GAAG,CAAC,GAAG,IAAM,IAAI,mBAAmB;IACjG,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,GAAG,CAAA,GAAA,uCAAoB,AAAD,EAC5C,SACA,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc;IAG5B,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,GAAG,CAAA,GAAA,UAAG,AAAD,EAAE,OAAO,qDAAqD;IAC9F,qEAAqE;IACrE,iHAAiH;IACjH,CAAA,GAAA,wBAAW,AAAD,EAAE,SAAS,GAAG,CAAC,wEAAwE,CAAC;IAClG,CAAA,GAAA,oBAAW,AAAD;IACV,CAAA,GAAA,uBAAc,AAAD;IACb,CAAA,GAAA,wBAAW,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;AAC5B,qBAAqB;AACvB;AAEA;;;;;;AAMA,GAEA,gDAAgD;AAChD,SAAS,CAAA,GAAA,kBAAQ,AAAD,IAAI,sCAAsC;AAE1D,iCAAiC;AACjC,CAAA,GAAA,wBAAW,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,sBAAU,AAAD;AAC/C,CAAA,GAAA,2BAAc,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,2BAAe,AAAD;AACvD,CAAA,GAAA,+BAAkB,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,qCAAyB,AAAD;AACrE,CAAA,GAAA,sBAAS,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,4BAAgB,AAAD;AAEnD,CAAA,GAAA,yBAAY,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,sBAAU,AAAD;;;;;4CCjFnC;yCACA;0CACA;4CACA;iDACA;iDACA;kDACA;oDACA;wDACA;kDACA;+CACA;AAVN,MAAM,SAAS,SAAS,cAAc,CAAC;AACvC,MAAM,MAAM,OAAO,UAAU,CAAC;AAC9B,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,SAAS,SAAS,cAAc,CAAC;AACvC,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,iBAAiB,SAAS,cAAc,CAAC;AAC/C,MAAM,qBAAqB,SAAS,cAAc,CAAC;AACnD,MAAM,eAAe,SAAS,cAAc,CAAC;AAC7C,MAAM,YAAY,SAAS,cAAc,CAAC;;;ACVjD,QAAQ,cAAc,GAAG,SAAU,CAAC;IAClC,OAAO,KAAK,EAAE,UAAU,GAAG,IAAI;QAAC,SAAS;IAAC;AAC5C;AAEA,QAAQ,iBAAiB,GAAG,SAAU,CAAC;IACrC,OAAO,cAAc,CAAC,GAAG,cAAc;QAAC,OAAO;IAAI;AACrD;AAEA,QAAQ,SAAS,GAAG,SAAU,MAAM,EAAE,IAAI;IACxC,OAAO,IAAI,CAAC,QAAQ,OAAO,CAAC,SAAU,GAAG;QACvC,IACE,QAAQ,aACR,QAAQ,gBACR,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,MAE3C;QAGF,OAAO,cAAc,CAAC,MAAM,KAAK;YAC/B,YAAY;YACZ,KAAK;gBACH,OAAO,MAAM,CAAC,IAAI;YACpB;QACF;IACF;IAEA,OAAO;AACT;AAEA,QAAQ,MAAM,GAAG,SAAU,IAAI,EAAE,QAAQ,EAAE,GAAG;IAC5C,OAAO,cAAc,CAAC,MAAM,UAAU;QACpC,YAAY;QACZ,KAAK;IACP;AACF;;;AClCA,mBAAmB;;;iDACN;wDACA;yDACA;qDACA;+CAEA;+CACA;gDACA;+CACA;iDACA;kDACA;8CAEA;iDAEA;AAdN,MAAM,cAAc,IAAI,uBAAuB;AAC/C,MAAM,qBAAqB,KAAK,KAAK,CAAC,OAAQ,CAAA,cAAc,IAAG,IAAK,mBAAmB;AACvF,MAAM,sBAAsB,KAAK,KAAK,CAAC,OAAQ,CAAA,cAAc,IAAG,IAAK,2BAA2B;AAChG,MAAM,kBAAkB,GAAG,mDAAmD;AAE9E,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB,MAAM,aAAa;AACnB,MAAM,YAAY;AAClB,MAAM,cAAc,KAAK,wBAAwB;AACjD,MAAM,eAAe;AAErB,MAAM,WAAW,OAAO,mCAAmC;AAE3D,MAAM,cAAc,IAAI;AAC/B,YAAY,GAAG,GAAG,qCAAoD,IAAI;;;AChB1E,OAAO,OAAO,GAAG,QAAQ,oBAAwB,YAAY,CAAC,WAAW;;;ACAzE;AAEA,IAAI,YAAY,CAAC;AACjB,SAAS,mBAAmB,EAAE;IAC5B,IAAI,QAAQ,SAAS,CAAC,GAAG;IACzB,IAAI,CAAC,OAAO;QACV,QAAQ;QACR,SAAS,CAAC,GAAG,GAAG;IAClB;IACA,OAAO;AACT;AACA,SAAS;IACP,IAAI;QACF,MAAM,IAAI;IACZ,EAAE,OAAO,KAAK;QACZ,IAAI,UAAU,AAAC,CAAA,KAAK,IAAI,KAAK,AAAD,EAAG,KAAK,CAAC;QACrC,IAAI,SACF,2EAA2E;QAC3E,mEAAmE;QACnE,OAAO,WAAW,OAAO,CAAC,EAAE;IAEhC;IACA,OAAO;AACT;AACA,SAAS,WAAW,GAAG;IACrB,OAAO,AAAC,CAAA,KAAK,GAAE,EAAG,OAAO,CAAC,2EAA2E,QAAQ;AAC/G;AAEA,kFAAkF;AAClF,SAAS,UAAU,GAAG;IACpB,IAAI,UAAU,AAAC,CAAA,KAAK,GAAE,EAAG,KAAK,CAAC;IAC/B,IAAI,CAAC,SACH,MAAM,IAAI,MAAM;IAElB,OAAO,OAAO,CAAC,EAAE;AACnB;AACA,QAAQ,YAAY,GAAG;AACvB,QAAQ,UAAU,GAAG;AACrB,QAAQ,SAAS,GAAG;;;;;iDCtCP;AAAN,MAAM,cAAc;IACzB,gBAAgB;IAChB,aAAa;IACb,SAAS;IAET,UAAU;IACV,aAAa;IAEb,iBAAiB;IACjB,SAAS;IACT,SAAS;IACT,aAAa;IACb,kBAAkB;IAClB,oBAAoB;IACpB,SAAS,EAAE;IACX,iBAAiB,EAAE;IACnB,kBAAkB;IAClB,iBAAiB;IAEjB,QAAQ;QACN,IAAI;QACJ,IAAI;QACJ,QAAQ;QACR,OAAO;QACP,IAAI;QACJ,IAAI;QACJ,GAAG;QACH,GAAG;IACL;IAEA,cAAc,EAAE;IAChB,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,qBAAqB;IACrB,mBAAmB;IAEnB,kBAAkB;AACpB,GAEA;;;;;;;;;;;;;;;;;;;EAmBE;;;;;ACzDF,oBAAoB;AACpB,sDAAgB;AAShB,yCAAgB;AAWhB,gDAAgB;AAvBhB;AAGO,SAAS;IACd,MAAM,eAAe,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM;IAC/D,MAAM,SAAS,CAAC;IAChB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,aAAa,OAAO,GAC7C,MAAM,CAAC,IAAI,GAAG;IAEhB,OAAO;AACT;AAEO,SAAS,IAAI,IAAI;IACtB,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI,KAAK,GAAG,CAAC,GAAG;IACtB,IAAI,UAAU;IACd,OAAO;QACL,UAAU,AAAC,CAAA,IAAI,UAAU,CAAA,IAAK;QAC9B,OAAO,UAAU,GAAG,qBAAqB;IAC3C;AACF;AAEO,SAAS,WAAW,KAAK,EAAE,IAAI;IACpC,SAAS,YAAY,KAAK;QACxB,0DAA0D;QAC1D,MAAM,IAAI,QAAQ,IAAI;QACtB,MAAM,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI;QAC5B,IAAI,GAAG;QACP,GAAG;YACD,GAAG;gBACD,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe;gBAC/B,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,KAAK,IAAI,GAAG,mCAAmC;YAChF,QAAS,KAAK,GAAG;YACjB,MAAM,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,GAAG;YAC9B,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,KAAK,MAAM,IAAI,IAAI,IAAK,CAAA,IAAI,IAAI,KAAK,GAAG,CAAC,EAAC,GAC9D,OAAO,IAAI;QAEf,QAAS,MAAM;IACjB;IAEA,MAAM,IAAI,YAAY;IACtB,MAAM,IAAI,YAAY;IACtB,OAAO,IAAK,CAAA,IAAI,CAAA,GAAI,kCAAkC;AACxD;;;;;ACxCA;;;;;;AAMA,GACA,0DAAgB;AAoBhB,6DAAgB;AAkChB;;;;;;AAMA,GACA,2DAAgB;AAxEhB;AACA;AACA;AASO,SAAS,qBAAqB,GAAG,EAAE,CAAC;IACzC,MAAM,SAAS,EAAE;IAEjB,SAAS,OAAO,kBAAkB;QAChC,kEAAkE;QAClE,IAAI,mBAAmB,MAAM,KAAK,GAAG;YACnC,OAAO,IAAI,CAAC;mBAAI;aAAmB;YACnC;QACF;QAEA,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACnC,IAAI,mBAAmB,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,kBAAkB;YACrE,OAAO;mBAAI;gBAAoB,GAAG,CAAC,EAAE;aAAC,GAAG,wCAAwC;QACnF;IACF;IAEA,OAAO,EAAE,GAAG,4CAA4C;IACxD,OAAO;AACT;AAEO,SAAS;IACd,IAAK,IAAI,IAAI,GAAG,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,EAAE,IAC9C,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,CAAC,EAAE,EAAE;IAGxE,6CAA6C;IAC7C,MAAM,gBAAgB,6BACpB,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,EACxB,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe;IAE7B,IAAI;IAEJ,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,eAAe;IAC9C,IAAI,kBAAkB,IAAI;QACxB,QAAQ,GAAG,CACT,CAAC,qBAAqB,CAAC,EACvB,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,CAAC,cAAc;QAEzC,iBAAiB,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,CAAC,cAAc;IAC1D,OACE,QAAQ,GAAG,CAAC,CAAC,8BAA8B,CAAC;IAG9C,OAAO;AACT;AAEA,SAAS,6BAA6B,YAAY,EAAE,eAAe;IACjE,OAAO,aAAa,SAAS,CAC3B,CAAC,cACC,YAAY,MAAM,KAAK,gBAAgB,MAAM,IAC7C,YAAY,KAAK,CAAC,CAAC,OAAO,QAAU,UAAU,eAAe,CAAC,MAAM;AAE1E;AASO,SAAS;IACd,MAAM,eAAe,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,CAAC,MAAM;IACpD,IAAI,eAAe,EAAE;IACrB,IAAI,oBAAoB;IACxB,IAAI,WAAW,CAAC;IAEhB,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,IAAK;QACrC,IAAI,WAAW,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,CAAC,EAAE;QAE1C,gDAAgD;QAChD,IAAI,cAAc,gBAAgB,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO;QACrD,IAAI,aAAa,gBAAgB,CAAA,GAAA,qBAAW,AAAD,EAAE,MAAM;QAEnD,IAAI,aAAa;QACjB,IAAI,QAAQ,EAAE;QACd,IAAI,eAAe,MAAM,+BAA+B;QAExD,IAAK,IAAI,IAAI,GAAG,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,EAAE,IAAK;YACnD,MAAM,KAAK,QAAQ,CAAC,EAAE;YACtB,MAAM,YAAY,WAAW,CAAC,GAAG;YAEjC,IAAI,CACF,SACA,iBACA,eACA,eACA,sBACD,GAAG,CAAA,GAAA,uCAAgB,AAAD,EACjB,cACA,WAAW,CAAC,EACZ,WAAW,CAAC,EACZ,WAAW,KAAK,EAChB,UAAU,CAAC,EACX,UAAU,CAAC,EACX,UAAU,EAAE,EACZ,UAAU,EAAE;YAGd,gDAAgD;YAChD,IAAI,cAAc;gBAChB,IAAI,OAAO,YACT,SACA,iBACA,YACA,eACA,eACA;gBAEF,MAAM,IAAI,CAAC;YACb;YAEA,gCAAgC;YAChC,IAAI,WAAW,mBACb,WACA,SACA,uBACA,GACA;YAGF,cAAc;YAEd,iDAAiD;YACjD,IAAI,CAAC,WAAW,cAAc,eAAe;QAC/C;QAEA,IAAI,WAAW;YAAE;YAAU;YAAY;QAAM;QAC7C,aAAa,IAAI,CAAC;QAElB,uBAAuB;QACvB,IAAI,aAAa,UAAU;YACzB,oBAAoB;YACpB,WAAW;QACb;IACF;IAEA,8CAA8C;IAC9C,wBAAwB,cAAc;IAEtC,wBAAwB;IACxB,aAAa,cAAc,mBAAmB;IAE9C,OAAO;QAAC;QAAc,YAAY,CAAC,kBAAkB;KAAC;AACxD;AAEA;;CAEC,GACD,SAAS,YACP,OAAO,EACP,eAAe,EACf,MAAM,EACN,aAAa,EACb,aAAa,EACb,OAAO;IAEP,IAAI,OAAO;QAAE;IAAQ;IAErB,8BAA8B;IAC9B,kBAAkB,KAAK,KAAK,CAAC;IAC7B,KAAK,eAAe,GAAG;IAEvB,6BAA6B;IAC7B,KAAK,EAAE,GAAG,AAAC,CAAA,gBAAgB,OAAO,CAAC,AAAD,IAAK;IACvC,KAAK,EAAE,GAAG,AAAC,CAAA,gBAAgB,OAAO,CAAC,AAAD,IAAK;IAEvC,cAAc;IACd,OAAO,CAAC,IAAI,kBAAkB,KAAK,EAAE;IACrC,OAAO,CAAC,IAAI,kBAAkB,KAAK,EAAE;IAErC,KAAK,aAAa,GAAG,OAAO,CAAC;IAC7B,KAAK,aAAa,GAAG,OAAO,CAAC;IAE7B,mBAAmB;IACnB,KAAK,IAAI,OAAO,QAAS;QACvB,IAAI,CAAC,IAAI,kBAAkB,IAAI,EAAE;QACjC,IAAI,CAAC,IAAI,kBAAkB,IAAI,EAAE;IACnC;IAEA,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,mBACP,MAAM,EACN,OAAO,EACP,qBAAqB,EACrB,cAAc,EACd,YAAY;IAEZ,IAAI,SAAS,OAAO,OAAO,KAAK;IAEhC,sDAAsD;IACtD,IAAI,SAAS,MAAO,CAAA,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,GAAG,cAAa;IAC9D,IAAI,cACF,AAAE,CAAA,CAAA,GAAA,qBAAW,AAAD,IAAI,IAAI,qBAAoB,IAAM,CAAA,CAAA,GAAA,qBAAW,AAAD,IAAI,CAAA,IAC5D,OAAO,KAAK,GACZ;IAEF,OAAO,eAAe,cAAc,GAAG,8CAA8C;AACvF;AAEA;;CAEC,GACD,SAAS,wBAAwB,SAAS,EAAE,QAAQ;IAClD,KAAK,IAAI,OAAO,UACd,IAAI,cAAc,GAAG,IAAI,UAAU,GAAG;AAE1C;AAEA;;CAEC,GACD,SAAS,aAAa,SAAS,EAAE,iBAAiB,EAAE,QAAQ;IAC1D,QAAQ,GAAG,CAAC;AAAG,gCAAyB,CAAC;IAEzC,UAAU,OAAO,CAAC,CAAC,KAAK;QACtB,QAAQ,GAAG,CACT,GAAG,EAAE,WAAW,EAAE,IAAI,QAAQ,CAAC,SAAS,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI;QAEvE,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM;YACvB,QAAQ,GAAG,CAAC,CAAC,iBAAU,EAAE,MAAM,UAAU,EAAE,KAAK,OAAO,EAAE;QAC3D;IACF;IAEA,QAAQ,GAAG,CACT;AAAG,0BAAmB,EACpB,CAAA,GAAA,qBAAW,AAAD,EAAE,YAAY,CAAC,kBAAkB,CAC5C,aAAa,EAAE,SAAS,OAAO,CAAC,IAAI;AAEzC;;;;;AClPA,sDAAgB;AAHhB;AACA;AAEO,SAAS,iBACd,YAAY,EACZ,UAAU,EACV,UAAU,EACV,WAAW,EACX,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU;IAEV,IAAI,UAAU;IACd,IAAI,aAAa;IACjB,IAAI,gBAAgB,KAClB,gBAAgB;IAClB,wCAAwC;IACxC,IAAI,uBAAuB,cAAc,iBAAiB;IAE1D,iFAAiF;IACjF,IAAI,CAAC,cACH,OAAO,uBACL,YACA,YACA,YACA,YACA,YACA;IAIJ,oDAAoD;IACpD,IAAI,CAAC,aAAa,IAAI,GAAG,GAAG,uBAC1B,cAAc,IAAI,cAAc,IAAI,eAAe,GACnD,IACG,CAAA,AAAC,CAAA,aAAa,UAAS,IAAK,aAC3B,AAAC,CAAA,aAAa,UAAS,IAAK,UAAS,GACzC,AAAC,CAAA,aAAa,UAAS,KAAM,IAAI,AAAC,CAAA,aAAa,UAAS,KAAM;IAGhE,4DAA4D;IAC5D,IAAI,CAAC,aACH,OAAO,uBACL,YACA,YACA,YACA,YACA,YACA;IAIJ,8CAA8C;IAC9C,aAAa,MAAM,KAAM,CAAA,KAAK,MAAM,KAAK,CAAA,IAAK,KAAK,MAAM,IAAI,KAAK;IAElE,IAAI,eAAe,UACjB,OAAO,uBACL,YACA,YACA,YACA,YACA,YACA;IAIJ,gCAAgC;IAChC,gBAAgB,aAAa,aAAa;IAC1C,gBAAgB,aAAa,aAAa;IAC1C,oDAAoD;IAEpD,gDAAgD;IAChD,CAAC,uBAAuB,cAAc,iBAAiB,gBAAgB,GACrE,qCACE,YACA,YACA,AAAC,CAAA,gBAAgB,UAAS,IAAK,KAAK,KAAK,CAAC,aAC1C,AAAC,CAAA,gBAAgB,UAAS,IAAK,KAAK,KAAK,CAAC,aAC1C,YACA,YACA,YACA;IAGJ,6CAA6C;IAC7C,UAAU,eAAe,eAAe;IAExC,qDAAqD;IACrD,IAAI,CAAC,SAAS;QACZ,gBAAgB;QAChB,gBAAgB;QAChB,aAAa;IACf,OACE,wBAAwB;IAG1B,OAAO;QACL;QACA;QACA;QACA;QACA;KACD;AACH;AAEA;;CAEC,GACD,SAAS,uBACP,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU;IAEV,OAAO,qCACL,YACA,YACA,GACA,GACA,YACA,YACA,YACA;AAEJ;AAEA;;CAEC,GACD,SAAS,eAAe,CAAC,EAAE,CAAC;IAC1B,OACE,KAAK,IAAI,CACP,AAAC,CAAA,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,AAAD,KAAM,IAAI,AAAC,CAAA,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,AAAD,KAAM,MAC3D,CAAA,GAAA,qBAAW,AAAD;AAEnB;AAEA;;CAEC,GACD,SAAS,qCACP,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU;IAEV,IAAI,KAAK,GAAG,CAAC,cAAc,QAAQ,KAAK,GAAG,CAAC,cAAc,MACxD,CAAC,YAAY,WAAW,GAAG,uBACzB,YACA,YACA,YACA;IAIJ,IAAI,CAAC,cAAc,iBAAiB,gBAAgB,GAClD,sCACE,YACA,YACA,YACA;IAGJ,IAAI,gBAAgB,aAAa,eAAe;IAChD,IAAI,gBAAgB,aAAa,eAAe;IAEhD,IAAI,wBAAwB,KAAK,IAAI,CACnC,AAAC,CAAA,gBAAgB,eAAc,KAAM,IACnC,AAAC,CAAA,gBAAgB,eAAc,KAAM;IAGzC,OAAO;QACL;QACA;QACA;QACA;KACD;AACH;AAEA;;CAEC,GACD,SAAS,uBAAuB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IAC9D,IAAI,OAAO,UAAU;IACrB,IAAI,OAAO,UAAU;IACrB,IAAI,YAAY,KAAK,IAAI,CAAC,QAAQ,IAAI,QAAQ;IAC9C,OAAO,YAAY,OAAO;QAAC,OAAO;QAAW,OAAO;KAAU,GAAG;QAAC;QAAG;KAAE;AACzE;AAEA;;CAEC,GACD,SAAS,sCACP,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU;IAEV,IAAI,UAAU,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO;IACjC,IAAI,UAAU,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO;IACjC,IAAI,qBAAqB,KAAK,IAAI,CAChC,AAAC,CAAA,aAAa,OAAM,KAAM,IAAI,AAAC,CAAA,aAAa,OAAM,KAAM;IAG1D,IAAI,KAAK,GAAG,CAAC,qBAAqB,CAAA,GAAA,qBAAW,AAAD,KAAK,MAC/C,OAAO;QAAC;QAAG;QAAY;KAAW;IAGpC,IAAI,CAAC,aAAa,IAAI,GAAG,GAAG,uBAC1B,cAAc,IAAI,cAAc,GAChC,IACG,CAAA,AAAC,CAAA,aAAa,OAAM,IAAK,aACxB,AAAC,CAAA,aAAa,OAAM,IAAK,UAAS,GACtC,AAAC,CAAA,aAAa,OAAM,KAAM,IAAI,AAAC,CAAA,aAAa,OAAM,KAAM,IAAI,CAAA,GAAA,qBAAW,AAAD,KAAK;IAG7E,IAAI,CAAC,aAAa;QAChB,QAAQ,IAAI,CAAC;QACb,OAAO;YAAC;YAAU;YAAK;SAAI;IAC7B;IAEA,IAAI,eACF,MAAM,KAAM,CAAA,KAAK,MAAM,KAAK,CAAA,IAAK,KAAK,MAAM,IAAI,KAAK;IACvD,IAAI,iBAAiB,UAAU;QAC7B,QAAQ,IAAI,CAAC;QACb,OAAO;YAAC;YAAU;YAAK;SAAI;IAC7B;IAEA,OAAO;QACL;QACA,aAAa,eAAe;QAC5B,aAAa,eAAe;KAC7B;AACH;AAEA;;CAEC,GACD,SAAS,uBAAuB,CAAC,EAAE,CAAC,EAAE,CAAC;IACrC,IAAI,eAAe,KAAK,IAAI,IAAI,IAAI;IACpC,IAAI,eAAe,GAAG,OAAO;QAAC;QAAO;QAAK;KAAI;IAC9C,IAAI,QAAQ,KAAK,IAAI,CAAC;IACtB,OAAO;QAAC;QAAO,CAAA,CAAC,IAAI,KAAI,IAAM,CAAA,IAAI,CAAA;QAAK,CAAA,CAAC,IAAI,KAAI,IAAM,CAAA,IAAI,CAAA;KAAG;AAC/D;;;;;AClOA,gDAAgB;AAwBhB,qDAAgB;AAyBhB,+DAAgB;AAkBhB,6CAAgB;AAgChB,gDAAgB;AAUhB,sDAAgB;AAWhB,gDAAgB;AAhJhB;AACA;AASA;AAMA;AACA;AACA;AACA;AAKO,SAAS;IACd,CAAA,GAAA,uBAAW,AAAD,EAAE,QAAQ;IACpB,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAA,GAAA,uBAAW,AAAD,EAAE,QAAQ,CAAC,SAAS,CAAC;IAE9D,8BAA8B;IAC9B,CAAA,GAAA,0BAAW,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAC5B,CAAA,GAAA,0BAAW,AAAD,EAAE,IAAI;IAChB,CAAA,GAAA,wBAAS,AAAD,EAAE,QAAQ,GAAG;IAErB,sBAAsB;IACtB,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,GAAG;IACxB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;IAE/B,uEAAuE;IACvE,CAAA,GAAA,+BAAiB,AAAD,EAAE,CAAA,GAAA,uBAAW,AAAD,EAAE,QAAQ,KAAK;IAC3C,CAAA,GAAA,8BAAgB,AAAD;IAEf,mCAAmC;IACnC,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW,GAAG;IAE1B,sBAAsB;IACtB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,sBAAsB,CAAA,GAAA,2BAAc,AAAD;AACpE;AAEO,SAAS;IACd,KAAK,IAAI,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,CAAE;QAC7C,IAAI,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,MAAQ,IAAI,KAAK,KAAK;QAC7D,IAAI,QAAQ;YACV,OAAO,UAAU,GAAG;YACpB,OAAO,OAAO,cAAc;QAC9B;IACF;IAEA,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;IAC/B,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,GAAG,EAAE;IAEhC,CAAA,GAAA,qBAAM,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,oCAAqB,AAAD;IACrD,CAAA,GAAA,qBAAM,AAAD,EAAE,gBAAgB,CAAC,aAAa,CAAA,GAAA,+BAAgB,AAAD;IAEpD,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,yBAAc,AAAD;IACb,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,qBAAU,AAAD;IAET,CAAA,GAAA,iCAAkB,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IACnC,CAAA,GAAA,6BAAc,AAAD,EAAE,QAAQ,GAAG;IAC1B,CAAA,GAAA,2BAAY,AAAD,EAAE,QAAQ,GAAG;AAC1B;AAEO,SAAS;IACd,CAAA,GAAA,6BAAc,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAC/B,CAAA,GAAA,iCAAkB,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG,QAAQ,+BAA+B;IAC1E,CAAA,GAAA,2BAAY,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAC7B,CAAA,GAAA,wBAAS,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAC1B,mDAAmD;IAEnD,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,GAAG,CAAA,GAAA,4CAAuB,AAAD;IACnD,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,GAAG,GAAG,qCAAqC;IAC1E,CAAA,GAAA,uBAAW,AAAD,EAAE,iBAAiB,GAAG;IAEhC,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,GAAG;IACxB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;IAE/B,mCAAmC;IACnC,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,sBAAsB,CAAA,GAAA,gCAAmB,AAAD;AACzE;AAEO,SAAS;IACd,qBAAqB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB;IACjD,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,GAAG,CAAC,kDAAkD,EAAE,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,oIAAoI,CAAC;IAC7O,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,IAAI,GACzB,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,IAAI,CAAC,kDAAkD,CAAC;IAE/E,CAAA,GAAA,qBAAM,AAAD,EAAE,gBAAgB,CAAC,SAAS,CAAA,GAAA,oCAAqB,AAAD;IACrD,CAAA,GAAA,qBAAM,AAAD,EAAE,gBAAgB,CAAC,aAAa,CAAA,GAAA,+BAAgB,AAAD;IAEpD,yBAAyB;IACzB,CAAA,GAAA,2BAAY,AAAD,EAAE,QAAQ,GAAG,OAAO,qBAAqB;IACpD,CAAA,GAAA,2BAAY,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAC7B,CAAA,GAAA,2BAAY,AAAD,EAAE,gBAAgB,CAAC,SAAS;IAEvC,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,YAAY,EAAE,CAAA,GAAA,uBAAW,AAAD,EAAE,YAAY,CAAC,GAClD,CAAA,GAAA,0CAAqB,AAAD;IAEtB,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,IAAI,GAAG;QAC5B,CAAA,GAAA,wBAAS,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;QAC1B,CAAA,GAAA,wBAAS,AAAD,EAAE,QAAQ,GAAG;IACvB;IAEA,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,IAAI,GACzB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;IAGjC,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,yBAAc,AAAD;IACb,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,qBAAU,AAAD;AACX;AAEO,SAAS;IACd,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;IAC/B,CAAA,GAAA,2BAAY,AAAD,EAAE,QAAQ,GAAG,MAAM,sBAAsB;IACpD,uEAAuE;IACvE,yDAAyD;IACzD,wDAAwD;IACxD,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW,GAAG,GAAG,sBAAsB;IACnD,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,sBAAsB,CAAA,GAAA,2BAAc,AAAD;AACpE;AAEO,SAAS;IACd,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,IAAI,GAAG;QAC5B,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG;QAE/B,CAAA,GAAA,sBAAW,AAAD;QACV,CAAA,GAAA,yBAAc,AAAD;QACb,CAAA,GAAA,sBAAW,AAAD;QACV,CAAA,GAAA,qBAAU,AAAD;IACX;AACF;AAEO,SAAS;IACd,QAAQ,GAAG,CAAC;IACZ,qBAAqB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB;IAEjD,MAAM,UAAU,OAAO,QAAQ,CAAC,QAAQ,KAAK;IAC7C,MAAM,eAAe,UACjB,mBACA;IACJ,WAAW;QACT,OAAO,QAAQ,CAAC,IAAI,GAAG;IACzB,GAAG;AACL;;;;;ACvJA,yDAAyD;AACzD,gDAAgB;AA0ChB,qDAAgB;AAwChB,wCAAwC;AACxC,iDAAgB;AAwEhB,gDAAgB;AAiDhB,mCAAmC;AACnC,oDAAgB;AA+BhB,+BAA+B;AAC/B,iDAAgB;AAlPhB;AACA;AACA;AAGO,SAAS;IACd,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,aAAa,EAAE;YACzB,MAAM,cACJ,KAAK,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE,IAAI,KAAK,CAAA,GAAA,wBAAY,AAAD,GAAG,+BAA+B;YAE5F,MAAM,QAAQ,KAAK,KAAK,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE;YAE7C,MAAM,SAAS,OAAO,CAAC;YACvB,MAAM,SAAS,OAAO,CAAC;YACvB,MAAM,OAAO,SAAS,cAAc,KAAK,GAAG,CAAC;YAC7C,MAAM,OAAO,SAAS,cAAc,KAAK,GAAG,CAAC;YAE7C,2BAA2B;YAC3B,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;YACb,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,QAAQ;YACnB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,MAAM;YACjB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;YAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,WAAW,GAAG;YAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM;YAEV,qBAAqB;YACrB,MAAM,kBAAkB;YACxB,MAAM,iBAAiB,KAAK,EAAE,GAAG;YAEjC,MAAM,QAAQ,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;YACxD,MAAM,QAAQ,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;YAExD,MAAM,SAAS,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;YACzD,MAAM,SAAS,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;YAEzD,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;YACb,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,MAAM;YACjB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,OAAO;YAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,QAAQ;YACnB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;YACb,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;YAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;QACV;IACF;AACF;AAEO,SAAS;IACd,wBAAwB;IACxB,MAAM,cACJ,KAAK,IAAI,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,EAAE,IAAI,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,EAAE,IAAI,KAChE,CAAA,GAAA,wBAAY,AAAD,GAAG,+BAA+B;IAE/C,MAAM,QAAQ,KAAK,KAAK,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,EAAE,EAAE,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,EAAE;IAErE,MAAM,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC;IACnC,MAAM,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC;IACnC,MAAM,OAAO,SAAS,cAAc,KAAK,GAAG,CAAC;IAC7C,MAAM,OAAO,SAAS,cAAc,KAAK,GAAG,CAAC;IAE7C,2BAA2B;IAC3B,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;IACb,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,QAAQ;IACnB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,MAAM;IACjB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;IAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,WAAW,GAAG;IAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM;IAEV,qBAAqB;IACrB,MAAM,kBAAkB;IACxB,MAAM,iBAAiB,KAAK,EAAE,GAAG;IAEjC,MAAM,QAAQ,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;IACxD,MAAM,QAAQ,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;IAExD,MAAM,SAAS,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;IACzD,MAAM,SAAS,OAAO,kBAAkB,KAAK,GAAG,CAAC,QAAQ;IAEzD,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;IACb,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,MAAM;IACjB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,OAAO;IAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM,CAAC,QAAQ;IACnB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;IACb,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;IAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;AACV;AAGO,SAAS;IACd,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ;QACnC,IAAI,CAAC,OAAO,aAAa,EAAE;YACzB,8BAA8B;YAC9B,IAAI,UAAU,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,EAAE;gBAC1C,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;gBACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,MAAM,GAAG,GAAG,GAAG,KAAK,EAAE,GAAG;gBAC5D,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG,wBAAwB,cAAc;gBACtD,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;YACV;YAEA,gCAAgC;YAChC,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;YACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,MAAM,GAAG,OAAO,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG;YACvE,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;YAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;YAER,gDAAgD;YAChD,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG,UAAU,yCAAyC;YACnE,CAAA,GAAA,kBAAG,AAAD,EAAE,YAAY,GAAG,UAAU,uCAAuC;YACpE,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;YAChB,IAAI,WAAW;YACf,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI,GAAG,GAAG,SAAS,QAAQ,CAAC;YAChC,CAAA,GAAA,kBAAG,AAAD,EAAE,QAAQ,CAAC,OAAO,OAAO,CAAC,EAAE,OAAO,CAAC;YAEtC,2BAA2B;YAC3B,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;YACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG;YACxD,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;YAChB,yDAAyD;YACzD,CAAA,GAAA,kBAAG,AAAD,EAAE,WAAW,GAAG;YAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM;YACV,aAAa;YAEb,oCAAoC;YACpC,IAAI,OAAO,UAAU,EAAE;gBACrB,MAAM,iBAAiB,OAAO,cAAc;gBAC5C,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;gBAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI,GAAG;gBACX,CAAA,GAAA,kBAAG,AAAD,EAAE,QAAQ,CACV,iBAAiB,GACjB,OAAO,CAAC,GAAG,OAAO,MAAM,GAAG,IAC3B,OAAO,CAAC,GAAG;YAEf;YAEA,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,EAAE;gBAChC,IAAI,mBAAmB,CAAA,GAAA,uBAAW,AAAD,EAAE,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;gBACjE,IAAI,qBAAqB,IAAI;oBAC3B,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;oBAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI,GAAG;oBACX,CAAA,GAAA,kBAAG,AAAD,EAAE,QAAQ,CACV,mBAAmB,GACnB,OAAO,CAAC,GAAG,OAAO,MAAM,GAAG,IAC3B,OAAO,CAAC,GAAG;gBAEf;YACF;QAQF;IACF;IAEA,8BAA8B;IAC9B;AACF;AAEO,SAAS;IACd,wBAAwB;IACxB,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,QAAQ,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,YAAY,KAAK,GAAG;QAC1D,4CAA4C;QAC5C,MAAM,aAAa,IAAI,+BAA+B;QACtD,MAAM,cAAc;QACpB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,CACX,CAAA,GAAA,uBAAW,AAAD,GACV,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,GAAG,aAAa,GACpC,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,GAAG,cAAc,GACrC,YACA;IAEJ,OAAO;QACL,+CAA+C;QAC/C,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;QACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CACL,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,EACpB,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,EACpB,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,MAAM,EACzB,GACA,KAAK,EAAE,GAAG;QAEZ,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;QAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;IACV;AAsBF;AAGO,SAAS;IACd,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG,CAAA,GAAA,qBAAM,AAAD,EAAE,KAAK,GAAG;IACrC,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG,CAAA,GAAA,qBAAM,AAAD,EAAE,MAAM,GAAG;IAEtC,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI,IAAI,gCAAgC;IAC5C,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;IACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CACL,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,EACnB,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,EACnB,CAAA,GAAA,uBAAW,AAAD,GACV,GACA,KAAK,EAAE,GAAG,IACT,2BAA2B;IAC9B,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI,IAAI,mDAAmD;IAE/D,uBAAuB;IACvB,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS;IACb,CAAA,GAAA,kBAAG,AAAD,EAAE,GAAG,CACL,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,EACnB,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,EACnB,CAAA,GAAA,uBAAW,AAAD,GACV,GACA,KAAK,EAAE,GAAG;IAEZ,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;IAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,IAAI;IACR,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,GAAG;IAChB,CAAA,GAAA,kBAAG,AAAD,EAAE,WAAW,GAAG;IAClB,CAAA,GAAA,kBAAG,AAAD,EAAE,MAAM;AACZ;AAGO,SAAS;IACd,CAAA,GAAA,kBAAG,AAAD,EAAE,OAAO,IAAI,uCAAuC;IACtD,CAAA,GAAA,kBAAG,AAAD,EAAE,SAAS,CAAC,GAAG,GAAG,CAAA,GAAA,qBAAM,AAAD,EAAE,KAAK,EAAE,CAAA,GAAA,qBAAM,AAAD,EAAE,MAAM;AACjD;;;;;AC1OA,oDAAgB;AAmBhB,yDAAgB;AA9BhB;AACA;AACA;AACA;AAMA;AAEO,SAAS;IACd,8BAA8B;IAC9B,sBAAsB,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW;IAC7C,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,yBAAc,AAAD;IACb,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,qBAAU,AAAD;IAET,0BAA0B;IAC1B,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW;IAEvB,iCAAiC;IACjC,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW,GAAG,CAAA,GAAA,8BAAkB,AAAD,GAC7C,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,sBAAsB;SAErD,CAAA,GAAA,qBAAO,AAAD;AAEV;AAEO,SAAS;IACd,8BAA8B;IAC9B,sBAAsB,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW;IAC7C,IAAI,CAAC,QAAQ,QAAQ,GAAG;IACxB,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,yBAAc,AAAD;IACb,CAAA,GAAA,sBAAW,AAAD;IACV,CAAA,GAAA,qBAAU,AAAD,KAAK,OAAO;IAErB,0BAA0B;IAC1B,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW;IAEvB,4CAA4C;IAC5C,IAAI,aACF,KAAK,IAAI,CACP,AAAC,CAAA,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,GAAG,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,AAAD,KAAM,IAC9C,AAAC,CAAA,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,GAAG,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,AAAD,KAAM,MAC/C,CAAA,GAAA,uBAAW,AAAD;IAEjB,kDAAkD;IAClD,IAAI,cAAc,UAAU,eAC1B,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,sBAAsB;SAErD,YAAY,YAAY;AAE5B;AAEA,SAAS,YAAY,UAAU,EAAE,OAAO;IACtC,QAAQ,GAAG,CAAC,CAAC,8BAA8B,CAAC;IAC5C,qBAAqB,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB;IACjD,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,QAAQ,KAAK,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW,EAClD,CAAA,GAAA,2BAAY,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;SAE7B,CAAA,GAAA,0BAAW,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;IAG9B,IAAI,SAAS,KAAK,KAAK,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,cAAc,GAAG;IACpE,IAAI,CAAC,cAAc,CAAC,SAClB,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,GAAG,CAAC,6DAA6D,EAAE,OAAO,8BAA8B,CAAC;SAE9H,CAAA,GAAA,0BAAW,AAAD,EAAE,SAAS,GAAG,CAAC,8DAA8D,EAAE,OAAO,8BAA8B,CAAC;AAEnI;AAEA,sCAAsC;AACtC,SAAS,sBAAsB,KAAK;IAClC,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAC3B,8CAA8C;QAC9C,OAAO,CAAC,GAAG,OAAO,EAAE,GAAG,QAAQ,OAAO,EAAE;QACxC,OAAO,CAAC,GAAG,OAAO,EAAE,GAAG,QAAQ,OAAO,EAAE;IAC1C;AACF;AAEA,SAAS;IACP,IAAI,cACF,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,KAAK,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,CAAC,EAAE,2EAA2E;IAChJ,IAAI,gBACF,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,CAAC;IACtE,CAAA,GAAA,uBAAW,AAAD,EAAE,iBAAiB,IAAI;IAEjC,IAAI,SAAS;IACb,IAAI,UAAU;IACd,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,iBAAiB,IAAI,YAAY,eAAe,EAAE;QAChE,UAAU,YAAY,OAAO;QAC7B,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,cAAc,CAAC,aAAa,GAAG,YAAY,OAAO;QACtE,CAAA,GAAA,uBAAW,AAAD,EAAE,iBAAiB,GAAG,GAAG,oCAAoC;QACvE,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,IAAI;QAEnC,IACE,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,GAAG,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,EAEzE,cACE,CAAA,GAAA,uBAAW,AAAD,EAAE,cAAc,CAAC,KAAK,CAAC,CAAA,GAAA,uBAAW,AAAD,EAAE,mBAAmB,CAAC;aAC9D;YACL,QAAQ,GAAG,CAAC;YACZ,SAAS;YACT,OAAO;gBAAC;gBAAQ;aAAQ;QAC1B;IACF;IAEA,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,IAAI,YAAY,EAAE;IACtC,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,CAAC,CAAC,IAAI,YAAY,EAAE;IAEtC,OAAO;QAAC;QAAQ;KAAQ;AAC1B;;;;;ACrGA,uDAAgB;AAmHhB,oCAAoC;AACpC,sDAAgB;AAjIhB;AAUA;AACA;AAEO,SAAS,kBAAkB,UAAU;IAC1C,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG,EAAE;IACxB,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,GAAG,EAAE,EAAE,mBAAmB;IACrD,CAAA,GAAA,uBAAW,AAAD,EAAE,gBAAgB,GAAG,IAAI,oBAAoB;IAEvD,MAAM,aAAa,CAAA,GAAA,uBAAW,AAAD,EAAE,WAAW;IAC1C,MAAM,eACJ,AAAE,CAAA,CAAA,GAAA,qBAAS,AAAD,IAAI,CAAA,GAAA,qBAAS,AAAD,CAAA,IAAK,CAAA,GAAA,2BAAe,AAAD,IAAK,CAAA,GAAA,uBAAW,AAAD;IAC1D,MAAM,UAAU,CAAA,GAAA,uBAAW,AAAD,IAAI,CAAA,GAAA,uBAAW,AAAD,IAAI,GAAG,yCAAyC;IACxF,MAAM,qBAAqB,KAAK,GAAG,CACjC,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAI,CAAA,UAAU,eAAe,CAAA,GAAA,8BAAkB,AAAD,CAAA;IAGnE,8EAA8E;IAC9E,IAAI,YACF,qBAAqB,cAAc;IAGrC,2EAA2E;IAC3E,IAAK,IAAI,IAAI,aAAa,IAAI,GAAG,IAAI,YAAY,IAAK;QACpD,IAAI,YAAY,qBAAqB,YAAY;QACjD,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,IAAI,CAAC;IAC3B;AACF;AAEA;;CAEC,GACD,SAAS,qBAAqB,YAAY,EAAE,OAAO;IACjD,MAAM,iBAAiB;QACrB;YACE,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG;YAC1B,IAAI;YACJ,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO;YACvB,IAAI;QACN;QACA;YACE,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG;YAC1B,IAAI,CAAC;YACL,IAAI,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO;YACvB,IAAI;QACN;KACD;IAED,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAK;QAC9C,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,cAAc,CAAC,EAAE;QAE5C,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,IAAI,CAAC;YACvB;YACA;YACA,QAAQ;YACR,OAAO;YACP;YACA;YACA,OAAO;YACP,YAAY;YACZ,gBAAgB;YAChB,eAAe;YACf,OAAO;QACT;IACF;AACF;AAEA;;CAEC,GACD,SAAS,qBAAqB,UAAU,EAAE,kBAAkB;IAC1D,IAAI,IAAI,IAAI,IAAI,IAAI;IACpB,IAAI,UAAU;IAEd,GAAG;QACD,IAAI,kBAAkB,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,KAAK,KAAK,EAAE,GAAG;QAChE,IAAI,cACF,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,KAAM,CAAA,CAAA,GAAA,qBAAS,AAAD,IAAI,CAAA,GAAA,qBAAS,AAAD,CAAA,IAAK,CAAA,GAAA,qBAAS,AAAD;QACpE,IAAI,eACF,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,KAAM,CAAA,CAAA,GAAA,uBAAW,AAAD,IAAI,GAAE,IAAK,CAAA,GAAA,uBAAW,AAAD,IAAI;QACtE,IAAI,mBAAmB,CAAA,GAAA,uBAAW,AAAD,EAAE,eAAe,KAAK,KAAK,EAAE,GAAG;QACjE,QAAQ,AAAC,cAAc,CAAA,GAAA,2BAAe,AAAD,IAAK,CAAA,GAAA,uBAAW,AAAD;QAEpD,KAAK,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG,KAAK,GAAG,CAAC,oBAAoB;QACxD,KAAK,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,GAAG,KAAK,GAAG,CAAC,oBAAoB;QAExD,KAAK,QAAQ,KAAK,GAAG,CAAC;QACtB,KAAK,QAAQ,KAAK,GAAG,CAAC;QAEtB,0DAA0D;QAC1D,MAAM,SAAS,KAAK,KAAK,CAAA,GAAA,8BAAkB,AAAD;QAC1C,MAAM,SAAS,KAAK,KAAK,CAAA,GAAA,8BAAkB,AAAD;QAC1C,MAAM,cAAc,KAAK,IAAI,CAC3B,AAAC,CAAA,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,AAAD,KAAM,IAAI,AAAC,CAAA,SAAS,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,AAAD,KAAM;QAG1E,UAAU,aACN,cAAc,qBAAqB,MAAM,cAAc,CAAA,GAAA,uBAAW,AAAD,IAAI,KACrE,cAAc,OAAO,cAAc,CAAA,GAAA,uBAAW,AAAD,IAAI;IACvD,QAAS,CAAC,SAAS;IAEnB,IAAI,QAAQ,CAAA,GAAA,mBAAU,AAAD,EAAE,CAAA,GAAA,sBAAU,AAAD,GAAG,CAAA,GAAA,qBAAS,AAAD,IAAI,+BAA+B;IAC9E,IAAI,YAAY,SAAS,KAAK,mCAAmC;IAEjE,OAAO;QACL;QACA;QACA,QAAQ;QACR;QACA,IAAI;QACJ,IAAI;QACJ;QACA,YAAY;QACZ,gBAAgB;QAChB,eAAe;QACf,OAAO,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO,CAAC,MAAM;IACnC;AACF;AAGO,SAAS;IACd,IAAI;IACJ,IAAI,aAAa,cAAc;IAC/B,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,QAAQ;IACnC,KAAK,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO;IACxB,KAAK,CAAA,GAAA,uBAAW,AAAD,EAAE,OAAO;IACxB,oGAAoG;IACpG,cAAc,CAAA,GAAA,qBAAS,AAAD;IACtB,QAAQ,AAAC,cAAc,CAAA,GAAA,2BAAe,AAAD,IAAK,CAAA,GAAA,uBAAW,AAAD;IACpD,KAAK;IACL,KAAK;IACL,CAAA,GAAA,uBAAW,AAAD,EAAE,MAAM,GAAG;QACnB,IAAI;QACJ,IAAI;QACJ,QAAQ;QACR,OAAO;QACP,IAAI;QACJ,IAAI;QACJ,GAAG;QACH,GAAG;IACL;AACF;;;;;ACxIA,iCAAiC;AACjC,sDAAgB;AAgBhB,sCAAsC;AACtC,2DAAgB;AAhChB;AACA;AAMA;AAQO,SAAS,iBAAiB,KAAK;IACpC,MAAM,OAAO,CAAA,GAAA,mBAAM,AAAD,EAAE,qBAAqB;IACzC,MAAM,SAAS,MAAM,OAAO,GAAG,KAAK,IAAI;IACxC,MAAM,SAAS,MAAM,OAAO,GAAG,KAAK,GAAG;IAEvC,CAAA,GAAA,qBAAW,AAAD,EAAE,gBAAgB,GAAG,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,CAAC,SAAS,CAC1D,CAAC,SACC,KAAK,KAAK,CAAC,SAAS,OAAO,CAAC,EAAE,SAAS,OAAO,CAAC,KAAK,OAAO,MAAM;IAGrE,CAAA,GAAA,oBAAW,AAAD;IACV,CAAA,GAAA,uBAAc,AAAD;IACb,CAAA,GAAA,oBAAW,AAAD;IACV,CAAA,GAAA,mBAAU,AAAD;AACX;AAGO,SAAS,sBAAsB,KAAK;IACzC,MAAM,OAAO,CAAA,GAAA,mBAAM,AAAD,EAAE,qBAAqB;IACzC,MAAM,SAAS,MAAM,OAAO,GAAG,KAAK,IAAI;IACxC,MAAM,SAAS,MAAM,OAAO,GAAG,KAAK,GAAG;IAEvC,KAAK,IAAI,UAAU,CAAA,GAAA,qBAAW,AAAD,EAAE,OAAO,CAAE;QACtC,MAAM,WAAW,KAAK,KAAK,CAAC,SAAS,OAAO,CAAC,EAAE,SAAS,OAAO,CAAC;QAChE,IACE,YAAY,OAAO,MAAM,IACzB,CAAC,OAAO,UAAU,IAClB,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,CAAC,MAAM,GAAG,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,EAC/D;YACA,OAAO,UAAU,GAAG;YACpB,OAAO,cAAc,GAAG,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,CAAC,MAAM;YAC1D,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,KAAK,GAAG,gCAAgC;YAChF,CAAA,GAAA,oBAAW,AAAD;YAEV,CAAA,GAAA,yBAAY,AAAD,EAAE,QAAQ,GAAG,MAAM,sBAAsB;YAEpD,CAAA,GAAA,2BAAc,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;YAC/B,CAAA,GAAA,2BAAc,AAAD,EAAE,QAAQ,GAAG;YAE1B,IAAI,CAAA,GAAA,qBAAW,AAAD,EAAE,eAAe,CAAC,MAAM,KAAK,CAAA,GAAA,qBAAW,AAAD,EAAE,cAAc,EAAE;gBACrE,CAAA,GAAA,mBAAM,AAAD,EAAE,mBAAmB,CAAC,SAAS;gBACpC,CAAA,GAAA,mBAAM,AAAD,EAAE,mBAAmB,CAAC,aAAa;gBACxC,CAAA,GAAA,+BAAkB,AAAD,EAAE,KAAK,CAAC,OAAO,GAAG;YACrC;YACA;QACF;IACF;AACF","sources":["src/main.js","src/global/domElements.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/global/constant.js","node_modules/@parcel/runtime-js/lib/runtime-874cfe27ea070c84.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","src/global/variable.js","src/utils/utils.js","src/logic/computation/solutionEvaluator.js","src/logic/computation/interceptionSimulator.js","src/logic/gameEvents.js","src/logic/drawing.js","src/logic/animation.js","src/logic/initialize.js","src/logic/mouseEvents.js"],"sourcesContent":["import {\n  aiinfo,\n  startButton,\n  infocontent,\n  reselectButton,\n  interceptionButton,\n  aiRequest,\n  finishButton,\n} from \"./global/domElements\";\nimport { randSeed } from \"./global/constant\";\nimport { globalState } from \"./global/variable\";\nimport { getUrlParameters, lcg } from \"./utils/utils\";\nimport { generatePermutations } from \"./logic/computation/solutionEvaluator\";\nimport {\n  startTrail,\n  reselectObjects,\n  startInterceptionSequence,\n  revealAISolution,\n  finishGame,\n} from \"./logic/gameEvents\";\nimport { clearCanvas, drawGameCircle } from \"./logic/drawing\";\n\nlet urlParams = getUrlParameters();\nif (urlParams.NUM_SELECTIONS !== undefined) {\n  globalState.NUM_SELECTIONS = Number(urlParams.NUM_SELECTIONS);\n}\nif (urlParams.NUM_TRIALS !== undefined) {\n  globalState.totalTrials = Number(urlParams.NUM_TRIALS);\n}\nif (urlParams.NUM_OBJECTS !== undefined) {\n  globalState.NUM_OBJECTS = Number(urlParams.NUM_OBJECTS);\n}\nif (urlParams.AI_HELP !== undefined) {\n  globalState.AI_HELP = Number(urlParams.AI_HELP);\n}\n\n// Initial setup\nfunction initGame(seed) {\n  //\n  if (globalState.AI_HELP == 0) {\n    aiinfo.innerHTML = `<p>AI assistance will not be available in this session. </p>`;\n  } else if (globalState.AI_HELP == 1) {\n    aiinfo.innerHTML = `<p>AI assistance will be available in this session. </p>`;\n  } else if (globalState.AI_HELP == 2) {\n    aiinfo.innerHTML = `<p>AI assistance is available on request in this session. </p>`;\n  }\n\n  // Enumerate all possible interception sequences of length NUM_SELECTIONS\n  const indices = Array.from({ length: globalState.NUM_OBJECTS }, (_, i) => i); // [0, 1, ..., N-1]\n  globalState.permutations = generatePermutations(\n    indices,\n    globalState.NUM_SELECTIONS\n  );\n\n  globalState.randomGenerator = lcg(seed); // Initialize random generator with the provided seed\n  //infocontent.innerHTML = '<p>Measuring display refresh rate...</p>';\n  //infocontent.innerHTML = `<p>Refresh rate detected: ${refreshRate} Hz. Press the button to start the game.</p>`;\n  infocontent.innerHTML = `<p>Press the button to start. Please observe the sequence carefully.</p>`;\n  clearCanvas();\n  drawGameCircle();\n  startButton.style.display = \"block\";\n  //startButton.blur();\n}\n\n/*\n--------------------------------------------------------------------------------------\n\n    Starting the game\n\n--------------------------------------------------------------------------------------\n*/\n\n// Start initialization on page load with a seed\ninitGame(randSeed); // Replace 12345 with any desired seed\n\n// Add event listeners to buttons\nstartButton.addEventListener(\"click\", startTrail);\nreselectButton.addEventListener(\"click\", reselectObjects);\ninterceptionButton.addEventListener(\"click\", startInterceptionSequence);\naiRequest.addEventListener(\"click\", revealAISolution);\n\nfinishButton.addEventListener(\"click\", finishGame);\n","export const canvas = document.getElementById(\"gameCanvas\");\nexport const ctx = canvas.getContext(\"2d\");\nexport const info = document.getElementById(\"info\");\nexport const aiinfo = document.getElementById(\"aiinfo\");\nexport const infocontent = document.getElementById(\"infocontent\");\nexport const startButton = document.getElementById(\"startButton\");\nexport const replayButton = document.getElementById(\"replayButton\");\nexport const reselectButton = document.getElementById(\"reselectButton\");\nexport const interceptionButton = document.getElementById(\"interceptionButton\");\nexport const finishButton = document.getElementById(\"finishButton\");\nexport const aiRequest = document.getElementById(\"aiRequest\");\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","// Global Constants\nexport const refreshRate = 60; // Assumed refresh rate\nexport const OBSERVATION_FRAMES = Math.round(3000 * (refreshRate / 1000)); // 3000 ms for demo\nexport const INTERCEPTION_FRAMES = Math.round(2000 * (refreshRate / 1000)); // 2000 ms for interception\nexport const speedMultiplier = 1; // Multiplier to adjust speed based on refresh rate\n\nexport const MIN_SPEED = 60;\nexport const MAX_SPEED = 120;\nexport const alphaParam = 1;\nexport const betaParam = 2;\nexport const GAME_RADIUS = 400; // Radius of game circle\nexport const ARROW_FACTOR = 30;\n\nexport const randSeed = 12345; // Seed for random number generator\n\nexport const playerImage = new Image();\nplayerImage.src = new URL(\"../../assets/player.png\", import.meta.url).href;\n","module.exports = require('./helpers/bundle-url').getBundleURL('kLM7g') + \"player.9326ee9c.png\";","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","export const globalState = {\n  NUM_SELECTIONS: 2, // Maximum number of objects to select\n  NUM_OBJECTS: 5, // Number of animated objects\n  AI_HELP: 0,\n\n  curTrial: 0,\n  totalTrials: 2,\n\n  randomGenerator: null, // Global variables for random generator (implements deterministic sequence that can be recreated in other languages)\n  centerX: 0,\n  centerY: 0,\n  totalFrames: 0,\n  animationFrameId: 0,\n  animationStartTime: 0,\n  objects: [], // Array to hold object properties\n  selectedObjects: [], // Tracks selected objects for interception sequence\n  hoverObjectIndex: -1, // Tracks which object is being hovered over\n  speedMultiplier: 1, // Multiplier to adjust speed based on refresh rate\n\n  player: {\n    x0: 0,\n    y0: 0,\n    radius: 15,\n    speed: 0,\n    dX: 0,\n    dY: 0,\n    x: 0,\n    y: 0,\n  },\n\n  permutations: [],\n  allSolutions: null,\n  bestSolution: null,\n  playerSolution: null,\n  interceptionCounter: 0,\n  interceptionFrame: 0,\n\n  canshowRequestAI: false,\n};\n\n/*\nallSolutions = [\n  {\n    sequence: [...],       // 序列（对象的索引列表）\n    totalValue: number,    // 该序列获得的总分数\n    moves: [               // 追踪玩家的拦截行动\n      {\n        success: boolean,       // 该拦截是否成功\n        value: number,          // 如果在圆内，拦截目标的得分\n        timeToIntercept: number,// 需要的帧数\n        dX: number,             // 玩家在 X 方向的移动速度\n        dY: number,             // 玩家在 Y 方向的移动速度\n        interceptPosX: number,  // 拦截点 X 坐标\n        interceptPosY: number,  // 拦截点 Y 坐标\n      },\n      ...\n    ]\n  },\n  ...\n];*/\n","import { globalState } from \"../global/variable\";\n\n// Utility Functions\nexport function getUrlParameters() {\n  const searchParams = new URLSearchParams(window.location.search);\n  const params = {};\n  for (const [key, value] of searchParams.entries()) {\n    params[key] = value;\n  }\n  return params;\n}\n\nexport function lcg(seed) {\n  const a = 1664525;\n  const c = 1013904223;\n  const m = Math.pow(2, 32);\n  let current = seed;\n  return function () {\n    current = (a * current + c) % m;\n    return current / m; // normalize to [0,1]\n  };\n}\n\nexport function sampleBeta(alpha, beta) {\n  function sampleGamma(shape) {\n    // Marsaglia and Tsang method for sampling Gamma(shape, 1)\n    const d = shape - 1 / 3;\n    const c = 1 / Math.sqrt(9 * d);\n    let u, v;\n    do {\n      do {\n        u = globalState.randomGenerator();\n        v = globalState.randomGenerator() * 2 - 1; // Uniformly distributed in (-1, 1)\n      } while (u <= 0);\n      const x = Math.pow(1 + c * v, 3);\n      if (x > 0 && Math.log(u) < 0.5 * v * v + d * (1 - x + Math.log(x))) {\n        return d * x;\n      }\n    } while (true);\n  }\n\n  const x = sampleGamma(alpha);\n  const y = sampleGamma(beta);\n  return x / (x + y); // Transform Gamma samples to Beta\n}\n","import { globalState } from \"../../global/variable\";\nimport { GAME_RADIUS } from \"../../global/constant\";\nimport { attemptIntercept } from \"./interceptionSimulator\";\n\n/*\n--------------------------------------------------------------------------------------\n\n    Generate all possible permutations\n\n--------------------------------------------------------------------------------------\n*/\nexport function generatePermutations(arr, k) {\n  const result = [];\n\n  function helper(currentPermutation) {\n    // If the current permutation is of length k, add it to the result\n    if (currentPermutation.length === k) {\n      result.push([...currentPermutation]);\n      return;\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      if (currentPermutation.includes(arr[i])) continue; // Skip duplicates\n      helper([...currentPermutation, arr[i]]); // Recursive call with new element added\n    }\n  }\n\n  helper([]); // Start recursion with an empty permutation\n  return result;\n}\n\nexport function lookupInterceptionPaths() {\n  for (let i = 0; i < globalState.NUM_SELECTIONS; i++) {\n    console.log(`Object selected ${i} = ${globalState.selectedObjects[i]}`);\n  }\n\n  // Find the index of the matching permutation\n  const matchingIndex = findMatchingPermutationIndex(\n    globalState.permutations,\n    globalState.selectedObjects\n  );\n  let playerSolution;\n\n  console.log(`Matching index: ${matchingIndex}`);\n  if (matchingIndex !== -1) {\n    console.log(\n      `Matching permutation:`,\n      globalState.permutations[matchingIndex]\n    );\n    playerSolution = globalState.allSolutions[matchingIndex];\n  } else {\n    console.log(`No matching permutation found.`);\n  }\n\n  return playerSolution;\n}\n\nfunction findMatchingPermutationIndex(permutations, selectedObjects) {\n  return permutations.findIndex(\n    (permutation) =>\n      permutation.length === selectedObjects.length &&\n      permutation.every((value, index) => value === selectedObjects[index])\n  );\n}\n\n/*\n--------------------------------------------------------------------------------------\n\n    Computing the Optimal Interception Paths\n\n--------------------------------------------------------------------------------------\n*/\nexport function enumerateAllSolutions() {\n  const numSequences = globalState.permutations.length;\n  let allSolutions = [];\n  let bestSolutionIndex = -1;\n  let maxValue = -Infinity;\n\n  for (let i = 0; i < numSequences; i++) {\n    let sequence = globalState.permutations[i];\n\n    // Clone objects and player to simulate movement\n    let copyObjects = structuredClone(globalState.objects);\n    let copyPlayer = structuredClone(globalState.player);\n\n    let totalValue = 0;\n    let moves = [];\n    let isInProgress = true; // Interception is still active\n\n    for (let j = 0; j < globalState.NUM_SELECTIONS; j++) {\n      const id = sequence[j];\n      const objectNow = copyObjects[id];\n\n      let [\n        success,\n        timeToIntercept,\n        interceptPosX,\n        interceptPosY,\n        finalDistanceAtCircle,\n      ] = attemptIntercept(\n        isInProgress,\n        copyPlayer.x,\n        copyPlayer.y,\n        copyPlayer.speed,\n        objectNow.x,\n        objectNow.y,\n        objectNow.dX,\n        objectNow.dY\n      );\n\n      // Move player and objects if still intercepting\n      if (isInProgress) {\n        let move = processMove(\n          success,\n          timeToIntercept,\n          copyPlayer,\n          interceptPosX,\n          interceptPosY,\n          copyObjects\n        );\n        moves.push(move);\n      }\n\n      // Compute score for this object\n      let valueNow = computeObjectValue(\n        objectNow,\n        success,\n        finalDistanceAtCircle,\n        j,\n        isInProgress\n      );\n\n      totalValue += valueNow;\n\n      // If interception fails, mark as not in progress\n      if (!success && isInProgress) isInProgress = false;\n    }\n\n    let solution = { sequence, totalValue, moves };\n    allSolutions.push(solution);\n\n    // Update best solution\n    if (totalValue > maxValue) {\n      bestSolutionIndex = i;\n      maxValue = totalValue;\n    }\n  }\n\n  // Normalize scores based on the best solution\n  normalizeSolutionValues(allSolutions, maxValue);\n\n  // Logging best solution\n  logSolutions(allSolutions, bestSolutionIndex, maxValue);\n\n  return [allSolutions, allSolutions[bestSolutionIndex]];\n}\n\n/**\n * Processes a move when interception is successful.\n */\nfunction processMove(\n  success,\n  timeToIntercept,\n  player,\n  interceptPosX,\n  interceptPosY,\n  objects\n) {\n  let move = { success };\n\n  // Round the time to intercept\n  timeToIntercept = Math.round(timeToIntercept);\n  move.timeToIntercept = timeToIntercept;\n\n  // Compute movement step size\n  move.dX = (interceptPosX - player.x) / timeToIntercept;\n  move.dY = (interceptPosY - player.y) / timeToIntercept;\n\n  // Move player\n  player.x += timeToIntercept * move.dX;\n  player.y += timeToIntercept * move.dY;\n\n  move.interceptPosX = player.x;\n  move.interceptPosY = player.y;\n\n  // Move all objects\n  for (let obj of objects) {\n    obj.x += timeToIntercept * obj.dX;\n    obj.y += timeToIntercept * obj.dY;\n  }\n\n  return move;\n}\n\n/**\n * Computes the value of the object based on whether interception was successful.\n */\nfunction computeObjectValue(\n  object,\n  success,\n  finalDistanceAtCircle,\n  selectionIndex,\n  isInProgress\n) {\n  if (success) return object.value;\n\n  // Apply weight-based scoring for missed interceptions\n  let weight = 0.5 * (globalState.NUM_SELECTIONS - selectionIndex);\n  let scaledValue =\n    ((GAME_RADIUS * 2 - finalDistanceAtCircle) / (GAME_RADIUS * 2)) *\n    object.value *\n    weight;\n\n  return isInProgress ? scaledValue : 0; // If no longer in progress, weight is applied\n}\n\n/**\n * Normalizes all solution values relative to the maximum.\n */\nfunction normalizeSolutionValues(solutions, maxValue) {\n  for (let sol of solutions) {\n    sol.totalValueProp = sol.totalValue / maxValue;\n  }\n}\n\n/**\n * Logs all solutions and the best one.\n */\nfunction logSolutions(solutions, bestSolutionIndex, maxValue) {\n  console.log(`\\n🔹 All Solutions Summary:`);\n\n  solutions.forEach((sol, i) => {\n    console.log(\n      `${i}: Sequence ${sol.sequence}, Score: ${sol.totalValue.toFixed(2)}`\n    );\n    sol.moves.forEach((move, index) => {\n      console.log(`   ↳ Move ${index}: success=${move.success}`);\n    });\n  });\n\n  console.log(\n    `\\n🏆 Best solution = ${\n      globalState.permutations[bestSolutionIndex]\n    }, maxValue = ${maxValue.toFixed(2)}`\n  );\n}\n","import { globalState } from \"../../global/variable\";\nimport { GAME_RADIUS } from \"../../global/constant\";\n\nexport function attemptIntercept(\n  isInProgress,\n  playerPosX,\n  playerPosY,\n  playerSpeed,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  let success = false;\n  let travelTime = Infinity;\n  let interceptPosX = NaN,\n    interceptPosY = NaN;\n  // let totalDistanceTraveled = Infinity;\n  let finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY;\n\n  // If interception is already over, compute final distance at the circle boundary\n  if (!isInProgress) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Compute interception time using quadratic formula\n  let [hasSolution, t1, t2] = solveQuadraticEquation(\n    objectVelX ** 2 + objectVelY ** 2 - playerSpeed ** 2,\n    2 *\n      ((objectPosX - playerPosX) * objectVelX +\n        (objectPosY - playerPosY) * objectVelY),\n    (objectPosX - playerPosX) ** 2 + (objectPosY - playerPosY) ** 2\n  );\n\n  // If no valid interception time exists, handle failure case\n  if (!hasSolution) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Select the smallest valid interception time\n  travelTime = t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n\n  if (travelTime === Infinity) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Compute interception position\n  interceptPosX = objectPosX + travelTime * objectVelX;\n  interceptPosY = objectPosY + travelTime * objectVelY;\n  // totalDistanceTraveled = travelTime * playerSpeed;\n\n  // Compute final distance at the circle boundary\n  [finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY] =\n    computeFinalDistanceAtCircleBoundary(\n      playerPosX,\n      playerPosY,\n      (interceptPosX - playerPosX) / Math.round(travelTime),\n      (interceptPosY - playerPosY) / Math.round(travelTime),\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n\n  // Check if interception is within the circle\n  success = isWithinCircle(interceptPosX, interceptPosY);\n\n  // Adjust return values based on interception success\n  if (!success) {\n    interceptPosX = circleBoundaryX;\n    interceptPosY = circleBoundaryY;\n    travelTime = timeToCircle;\n  } else {\n    finalDistanceAtCircle = 0;\n  }\n\n  return [\n    success,\n    travelTime,\n    interceptPosX,\n    interceptPosY,\n    finalDistanceAtCircle,\n  ];\n}\n\n/**\n * Handles the case where interception is impossible.\n */\nfunction computeNoInterceptCase(\n  playerPosX,\n  playerPosY,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  return computeFinalDistanceAtCircleBoundary(\n    playerPosX,\n    playerPosY,\n    0,\n    0,\n    objectPosX,\n    objectPosY,\n    objectVelX,\n    objectVelY\n  );\n}\n\n/**\n * Computes whether a point is inside the circle.\n */\nfunction isWithinCircle(x, y) {\n  return (\n    Math.sqrt(\n      (x - globalState.centerX) ** 2 + (y - globalState.centerY) ** 2\n    ) <= GAME_RADIUS\n  );\n}\n\n/**\n * Computes player's movement to the circle boundary and final distance to object.\n */\nfunction computeFinalDistanceAtCircleBoundary(\n  playerPosX,\n  playerPosY,\n  playerVelX,\n  playerVelY,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  if (Math.abs(playerVelX) < 1e-6 && Math.abs(playerVelY) < 1e-6) {\n    [playerVelX, playerVelY] = computeDirectionVector(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY\n    );\n  }\n\n  let [timeToCircle, circleBoundaryX, circleBoundaryY] =\n    computePlayerDistanceToCircleBoundary(\n      playerPosX,\n      playerPosY,\n      playerVelX,\n      playerVelY\n    );\n\n  let objectFutureX = objectPosX + timeToCircle * objectVelX;\n  let objectFutureY = objectPosY + timeToCircle * objectVelY;\n\n  let finalDistanceAtCircle = Math.sqrt(\n    (objectFutureX - circleBoundaryX) ** 2 +\n      (objectFutureY - circleBoundaryY) ** 2\n  );\n\n  return [\n    finalDistanceAtCircle,\n    timeToCircle,\n    circleBoundaryX,\n    circleBoundaryY,\n  ];\n}\n\n/**\n * Computes a normalized direction vector from (startX, startY) to (targetX, targetY).\n */\nfunction computeDirectionVector(startX, startY, targetX, targetY) {\n  let dirX = targetX - startX;\n  let dirY = targetY - startY;\n  let magnitude = Math.sqrt(dirX ** 2 + dirY ** 2);\n  return magnitude > 1e-6 ? [dirX / magnitude, dirY / magnitude] : [0, 0];\n}\n\n/**\n * Computes the player's distance to the circle boundary using quadratic intersection.\n */\nfunction computePlayerDistanceToCircleBoundary(\n  playerPosX,\n  playerPosY,\n  playerVelX,\n  playerVelY\n) {\n  let centerX = globalState.centerX;\n  let centerY = globalState.centerY;\n  let playerDistToCenter = Math.sqrt(\n    (playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2\n  );\n\n  if (Math.abs(playerDistToCenter - GAME_RADIUS) < 1e-6) {\n    return [0, playerPosX, playerPosY];\n  }\n\n  let [hasSolution, t1, t2] = solveQuadraticEquation(\n    playerVelX ** 2 + playerVelY ** 2,\n    2 *\n      ((playerPosX - centerX) * playerVelX +\n        (playerPosY - centerY) * playerVelY),\n    (playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2 - GAME_RADIUS ** 2\n  );\n\n  if (!hasSolution) {\n    console.warn(\"🚨 Player's movement does not reach the circle boundary.\");\n    return [Infinity, NaN, NaN];\n  }\n\n  let timeToCircle =\n    t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n  if (timeToCircle === Infinity) {\n    console.warn(\"🚨 Player is moving away from the circle.\");\n    return [Infinity, NaN, NaN];\n  }\n\n  return [\n    timeToCircle,\n    playerPosX + timeToCircle * playerVelX,\n    playerPosY + timeToCircle * playerVelY,\n  ];\n}\n\n/**\n * Solves a quadratic equation Ax^2 + Bx + C = 0 and returns [hasSolution, t1, t2].\n */\nfunction solveQuadraticEquation(A, B, C) {\n  let discriminant = B ** 2 - 4 * A * C;\n  if (discriminant < 0) return [false, NaN, NaN];\n  let sqrtD = Math.sqrt(discriminant);\n  return [true, (-B + sqrtD) / (2 * A), (-B - sqrtD) / (2 * A)];\n}\n","import { globalState } from \"../global/variable.js\";\nimport {\n  canvas,\n  startButton,\n  replayButton,\n  interceptionButton,\n  reselectButton,\n  aiRequest,\n  infocontent,\n} from \"../global/domElements.js\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing.js\";\nimport { animateObjects, animateInterception } from \"./animation.js\";\nimport { initializeObjects, initializePlayer } from \"./initialize.js\";\nimport { handleObjectSelection, handleMouseHover } from \"./mouseEvents.js\";\nimport {\n  lookupInterceptionPaths,\n  enumerateAllSolutions,\n} from \"./computation/solutionEvaluator.js\";\n\nexport function startTrail() {\n  globalState.curTrial++;\n  console.log(`------curTrail: ${globalState.curTrial}---------`);\n\n  // Hide the start round button\n  startButton.style.display = \"none\";\n  startButton.blur();\n  aiRequest.disabled = true;\n\n  // Update the info div\n  infocontent.innerHTML = \"<p>Example sequence in progress...</p>\";\n  globalState.canshowRequestAI = false;\n\n  // Initialize the objects and the player positions, direction and speed\n  initializeObjects(globalState.curTrial === 1);\n  initializePlayer();\n\n  // Reset frame counter for the demo\n  globalState.totalFrames = 0;\n\n  // Start the animation\n  globalState.animationFrameId = requestAnimationFrame(animateObjects);\n}\n\nexport function reselectObjects() {\n  for (let index of globalState.selectedObjects) {\n    let object = globalState.objects.find((obj) => obj.index === index);\n    if (object) {\n      object.isSelected = false;\n      delete object.selectionIndex;\n    }\n  }\n\n  globalState.hoverObjectIndex = -1;\n  globalState.selectedObjects = [];\n\n  canvas.addEventListener(\"click\", handleObjectSelection);\n  canvas.addEventListener(\"mousemove\", handleMouseHover);\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n\n  interceptionButton.style.display = \"none\";\n  reselectButton.disabled = true;\n  replayButton.disabled = false;\n}\n\nexport function startInterceptionSequence() {\n  reselectButton.style.display = \"none\";\n  interceptionButton.style.display = \"none\"; // Hide the interception button\n  replayButton.style.display = \"none\";\n  aiRequest.style.display = \"none\";\n  //aiRequest.disabled = true; // Disables the button\n\n  globalState.playerSolution = lookupInterceptionPaths();\n  globalState.interceptionCounter = 0; // the index of the interception path\n  globalState.interceptionFrame = 0;\n\n  infocontent.innerHTML = \"<p>Interception sequence in progress...</p>\";\n  globalState.canshowRequestAI = false;\n\n  // Start the interception animation\n  globalState.animationFrameId = requestAnimationFrame(animateInterception);\n}\n\nexport function endDemo() {\n  cancelAnimationFrame(globalState.animationFrameId);\n  infocontent.innerHTML = `<p><center>OR</center></p><p>When ready, click on ${globalState.NUM_SELECTIONS} objects to determine the order of interception. The goal is to maximize the point value across successfully intercepted objects</p>`;\n  if (globalState.AI_HELP == 1) {\n    infocontent.innerHTML += `<p>The suggested AI solution is shown in blue </p>`;\n  }\n  canvas.addEventListener(\"click\", handleObjectSelection);\n  canvas.addEventListener(\"mousemove\", handleMouseHover);\n\n  // Show the replay button\n  replayButton.disabled = false; // enables the button\n  replayButton.style.display = \"block\";\n  replayButton.addEventListener(\"click\", replayDemo);\n\n  [globalState.allSolutions, globalState.bestSolution] =\n    enumerateAllSolutions();\n\n  if (globalState.AI_HELP == 2) {\n    aiRequest.style.display = \"block\";\n    aiRequest.disabled = false;\n  }\n\n  if (globalState.AI_HELP == 1) {\n    globalState.canshowRequestAI = true;\n  }\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n}\n\nexport function replayDemo() {\n  globalState.canshowRequestAI = false;\n  replayButton.disabled = true; // Disables the button\n  //replayButton.style.display = 'none'; // Hide the button during replay\n  //initializeObjects(); // Reinitialize objects for replay\n  //initializePlayer();  // Reinitialize player for replay\n  globalState.totalFrames = 0; // Reset frame counter\n  globalState.animationFrameId = requestAnimationFrame(animateObjects);\n}\n\nexport function revealAISolution() {\n  if (globalState.AI_HELP == 2) {\n    globalState.canshowRequestAI = true;\n\n    clearCanvas();\n    drawGameCircle();\n    drawObjects();\n    drawPlayer();\n  }\n}\n\nexport function finishGame() {\n  console.log(\"Game finished, redirecting to feedback...\");\n  cancelAnimationFrame(globalState.animationFrameId);\n\n  const isLocal = window.location.hostname === \"localhost\";\n  const feedbackPath = isLocal\n    ? \"/feedback.html\"\n    : \"/Human_AI_Interaction/feedback.html\";\n  setTimeout(() => {\n    window.location.href = feedbackPath;\n  }, 100);\n}\n","import { ARROW_FACTOR, GAME_RADIUS, playerImage } from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { canvas, ctx } from \"../global/domElements.js\";\n\n// Function to draw arrows indicating direction and speed\nexport function drawArrows() {\n  globalState.objects.forEach((object) => {\n    if (!object.isIntercepted) {\n      const arrowLength =\n        Math.sqrt(object.dX ** 2 + object.dY ** 2) * ARROW_FACTOR; // Scale speed for arrow length\n\n      const angle = Math.atan2(object.dY, object.dX);\n\n      const startX = object.x;\n      const startY = object.y;\n      const endX = startX + arrowLength * Math.cos(angle);\n      const endY = startY + arrowLength * Math.sin(angle);\n\n      // Draw the main arrow line\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.lineTo(endX, endY);\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"gray\";\n      ctx.stroke();\n\n      // Draw the arrowhead\n      const arrowheadLength = 12;\n      const arrowheadAngle = Math.PI / 6;\n\n      const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n      const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n\n      const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n      const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n\n      ctx.beginPath();\n      ctx.moveTo(endX, endY);\n      ctx.lineTo(leftX, leftY);\n      ctx.lineTo(rightX, rightY);\n      ctx.closePath();\n      ctx.fillStyle = \"gray\";\n      ctx.fill();\n    }\n  });\n}\n\nexport function drawPlayerArrow() {\n  // Draw the player arrow\n  const arrowLength =\n    Math.sqrt(globalState.player.dX ** 2 + globalState.player.dY ** 2) *\n    ARROW_FACTOR; // Scale speed for arrow length\n\n  const angle = Math.atan2(globalState.player.dY, globalState.player.dX);\n\n  const startX = globalState.player.x;\n  const startY = globalState.player.y;\n  const endX = startX + arrowLength * Math.cos(angle);\n  const endY = startY + arrowLength * Math.sin(angle);\n\n  // Draw the main arrow line\n  ctx.beginPath();\n  ctx.moveTo(startX, startY);\n  ctx.lineTo(endX, endY);\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = \"gray\";\n  ctx.stroke();\n\n  // Draw the arrowhead\n  const arrowheadLength = 12;\n  const arrowheadAngle = Math.PI / 6;\n\n  const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n  const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n\n  const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n  const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n\n  ctx.beginPath();\n  ctx.moveTo(endX, endY);\n  ctx.lineTo(leftX, leftY);\n  ctx.lineTo(rightX, rightY);\n  ctx.closePath();\n  ctx.fillStyle = \"gray\";\n  ctx.fill();\n}\n\n// Function to draw all animated objects\nexport function drawObjects() {\n  globalState.objects.forEach((object, index) => {\n    if (!object.isIntercepted) {\n      // Highlight object if hovered\n      if (index === globalState.hoverObjectIndex) {\n        ctx.beginPath();\n        ctx.arc(object.x, object.y, object.radius + 5, 0, Math.PI * 2);\n        ctx.fillStyle = \"rgba(255, 0, 0, 0.3)\"; // Glow effect\n        ctx.fill();\n      }\n\n      // Draw the object's filled area\n      ctx.beginPath();\n      ctx.arc(object.x, object.y, object.radius * object.value, 0, Math.PI * 2);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n\n      // Set text alignment and baseline for centering\n      ctx.textAlign = \"center\"; // Aligns text horizontally to the center\n      ctx.textBaseline = \"middle\"; // Aligns text vertically to the center\n      ctx.fillStyle = \"rgb(0, 0, 0)\";\n      let fontSize = 20;\n      ctx.font = `${fontSize}px Arial`;\n      ctx.fillText(index, object.x, object.y);\n\n      // Draw the object's border\n      ctx.beginPath();\n      ctx.arc(object.x, object.y, object.radius, 0, Math.PI * 2);\n      ctx.lineWidth = 3;\n      //ctx.fillStyle = 'rgba(14, 13, 13, 0.3)'; // Glow effect\n      ctx.strokeStyle = \"red\";\n      ctx.stroke();\n      //ctx.fill();\n\n      // Draw selection number if selected\n      if (object.isSelected) {\n        const selectionIndex = object.selectionIndex;\n        ctx.fillStyle = \"black\";\n        ctx.font = \"24px Arial\";\n        ctx.fillText(\n          selectionIndex + 1,\n          object.x + object.radius + 14,\n          object.y + 8\n        );\n      }\n\n      if (globalState.canshowRequestAI) {\n        let AISelectionIndex = globalState.bestSolution.sequence.indexOf(index);\n        if (AISelectionIndex !== -1) {\n          ctx.fillStyle = \"blue\";\n          ctx.font = \"24px Arial\";\n          ctx.fillText(\n            AISelectionIndex + 1,\n            object.x - object.radius - 20,\n            object.y + 8\n          );\n        }\n      }\n\n      // For debugging\n      if (!true) {\n        ctx.fillStyle = \"red\";\n        ctx.font = \"24px Arial\";\n        ctx.fillText(index, object.x + object.radius + 10, object.y + 14);\n      }\n    }\n  });\n\n  // Draw arrows for all objects\n  drawArrows();\n}\n\nexport function drawPlayer() {\n  // Draw the player image\n  if (playerImage.complete && playerImage.naturalWidth !== 0) {\n    // Ensure the image is loaded before drawing\n    const imageWidth = 60; // Adjust the size of the image\n    const imageHeight = 60;\n    ctx.drawImage(\n      playerImage,\n      globalState.player.x - imageWidth / 2,\n      globalState.player.y - imageHeight / 2,\n      imageWidth,\n      imageHeight\n    );\n  } else {\n    // Fallback in case the image hasn't loaded yet\n    ctx.beginPath();\n    ctx.arc(\n      globalState.player.x,\n      globalState.player.y,\n      globalState.player.radius,\n      0,\n      Math.PI * 2\n    );\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n  }\n\n  // Draw arrows for player\n  //drawPlayerArrow();\n\n  // Visualize interception position (for debugging)\n  if (!true) {\n    if (globalState.playerSolution) {\n      let currentMove =\n        globalState.playerSolution.moves[globalState.interceptionCounter]; // object that contains all information for intercepting the current object\n      ctx.beginPath();\n      ctx.arc(\n        currentMove.interceptPosX,\n        currentMove.interceptPosY,\n        15,\n        0,\n        Math.PI * 2\n      );\n      ctx.fillStyle = \"blue\";\n      ctx.fill();\n    }\n  }\n}\n\n// Function to draw the main circle\nexport function drawGameCircle() {\n  globalState.centerX = canvas.width / 2;\n  globalState.centerY = canvas.height / 2;\n\n  ctx.save(); // Save the current canvas state\n  ctx.beginPath();\n  ctx.arc(\n    globalState.centerX,\n    globalState.centerY,\n    GAME_RADIUS,\n    0,\n    Math.PI * 2\n  ); // Define the clipping path\n  ctx.clip(); // Apply clipping to restrict drawings to this area\n\n  // Draw the main circle\n  ctx.beginPath();\n  ctx.arc(\n    globalState.centerX,\n    globalState.centerY,\n    GAME_RADIUS,\n    0,\n    Math.PI * 2\n  );\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n  ctx.lineWidth = 5;\n  ctx.strokeStyle = \"black\";\n  ctx.stroke();\n}\n\n// Function to clear the canvas\nexport function clearCanvas() {\n  ctx.restore(); // Restore to the original canvas state\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n","import { OBSERVATION_FRAMES, GAME_RADIUS } from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { startButton, infocontent, finishButton } from \"../global/domElements.js\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing.js\";\nimport { endDemo } from \"./gameEvents.js\";\n\nexport function animateObjects() {\n  // Update positions and redraw\n  updateObjectPositions(globalState.totalFrames);\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n\n  // Increment frame counter\n  globalState.totalFrames++;\n\n  // Continue animation or end demo\n  if (globalState.totalFrames < OBSERVATION_FRAMES) {\n    globalState.animationFrameId = requestAnimationFrame(animateObjects);\n  } else {\n    endDemo();\n  }\n}\n\nexport function animateInterception() {\n  // Update positions and redraw\n  updateObjectPositions(globalState.totalFrames);\n  let [status, success] = updatePlayerPosition();\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer(); // temp\n\n  // Increment frame counter\n  globalState.totalFrames++;\n\n  // Is the player still within the game area?\n  let isInCircle =\n    Math.sqrt(\n      (globalState.player.x - globalState.centerX) ** 2 +\n        (globalState.player.y - globalState.centerY) ** 2\n    ) <= GAME_RADIUS;\n\n  // Continue animation or end interception sequence\n  if (isInCircle && status == \"in progress\") {\n    globalState.animationFrameId = requestAnimationFrame(animateInterception);\n  } else {\n    finishTrial(isInCircle, success);\n  }\n}\n\nfunction finishTrial(isInCircle, success) {\n  console.log(`Finished interception sequence`);\n  cancelAnimationFrame(globalState.animationFrameId);\n  if (globalState.curTrial === globalState.totalTrials) {\n    finishButton.style.display = \"block\";\n  } else {\n    startButton.style.display = \"block\";\n  }\n    \n  let valNow = Math.round(globalState.playerSolution.totalValueProp * 100);\n  if (!isInCircle || !success) {\n    infocontent.innerHTML = `<p>Reached outside of the circle</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n  } else {\n    infocontent.innerHTML = `<p>Finished interception sequence</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n  }\n}\n\n// Function to update object positions\nfunction updateObjectPositions(frame) {\n  globalState.objects.forEach((object) => {\n    // Update object's position based on its speed\n    object.x = object.x0 + frame * object.dX;\n    object.y = object.y0 + frame * object.dY;\n  });\n}\n\nfunction updatePlayerPosition() {\n  let currentMove =\n    globalState.playerSolution.moves[globalState.interceptionCounter]; // object that contains all information for intercepting the current object\n  let currentObject =\n    globalState.playerSolution.sequence[globalState.interceptionCounter];\n  globalState.interceptionFrame += 1;\n\n  let status = \"in progress\";\n  let success = false;\n  if (globalState.interceptionFrame == currentMove.timeToIntercept) {\n    success = currentMove.success;\n    globalState.objects[currentObject].isIntercepted = currentMove.success;\n    globalState.interceptionFrame = 0; // reset counter for the next object\n    globalState.interceptionCounter += 1;\n\n    if (\n      globalState.interceptionCounter < globalState.playerSolution.moves.length\n    ) {\n      currentMove =\n        globalState.playerSolution.moves[globalState.interceptionCounter];\n    } else {\n      console.log(\"Finished with interception sequence\");\n      status = \"finished\";\n      return [status, success];\n    }\n  }\n\n  globalState.player.x += currentMove.dX;\n  globalState.player.y += currentMove.dY;\n\n  return [status, success];\n}\n","import {\n  MAX_SPEED,\n  MIN_SPEED,\n  GAME_RADIUS,\n  refreshRate,\n  speedMultiplier,\n  OBSERVATION_FRAMES,\n  alphaParam,\n  betaParam,\n} from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { sampleBeta } from \"../utils/utils.js\";\n\nexport function initializeObjects(isEasyMode) {\n  globalState.objects = [];\n  globalState.selectedObjects = []; // Reset selections\n  globalState.hoverObjectIndex = -1; // Reset hover index\n\n  const numObjects = globalState.NUM_OBJECTS;\n  const specialSpeed =\n    ((MAX_SPEED - MIN_SPEED) * speedMultiplier) / refreshRate;\n  const offsetX = GAME_RADIUS - GAME_RADIUS / 5; // Position special objects near the edge\n  const specialFinalRadius = Math.abs(\n    globalState.centerX - (offsetX - specialSpeed * OBSERVATION_FRAMES)\n  );\n\n  // 1️⃣ **Create two special objects (Left & Right, moving toward the center)**\n  if (isEasyMode) {\n    createSpecialObjects(specialSpeed, offsetX);\n  }\n\n  // 2️⃣ **Create remaining random objects (far from the center, low value)**\n  for (let i = isEasyMode ? 2 : 0; i < numObjects; i++) {\n    let newObject = generateRandomObject(isEasyMode, specialFinalRadius);\n    globalState.objects.push(newObject);\n  }\n}\n\n/**\n * Creates two special objects that move toward the center.\n */\nfunction createSpecialObjects(specialSpeed, offsetX) {\n  const specialObjects = [\n    {\n      x0: globalState.centerX - offsetX,\n      dX: specialSpeed,\n      y0: globalState.centerY,\n      dY: 0,\n    },\n    {\n      x0: globalState.centerX + offsetX,\n      dX: -specialSpeed,\n      y0: globalState.centerY,\n      dY: 0,\n    },\n  ];\n\n  for (let i = 0; i < specialObjects.length; i++) {\n    const { x0, y0, dX, dY } = specialObjects[i];\n\n    globalState.objects.push({\n      x0,\n      y0,\n      radius: 15,\n      speed: specialSpeed,\n      dX,\n      dY,\n      value: 0.7, // High priority objects\n      isSelected: false,\n      selectionIndex: NaN,\n      isIntercepted: false,\n      index: i,\n    });\n  }\n}\n\n/**\n * Generates a random object positioned far from the center.\n */\nfunction generateRandomObject(isEasyMode, specialFinalRadius) {\n  let x0, y0, dx, dy, speed;\n  let isValid = false;\n\n  do {\n    let randomDirection = globalState.randomGenerator() * Math.PI * 2;\n    let randomSpeed =\n      globalState.randomGenerator() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED;\n    let randomRadius =\n      globalState.randomGenerator() * (GAME_RADIUS * 0.6) + GAME_RADIUS / 3;\n    let randomStartAngle = globalState.randomGenerator() * Math.PI * 2;\n    speed = (randomSpeed * speedMultiplier) / refreshRate;\n\n    x0 = globalState.centerX + Math.cos(randomStartAngle) * randomRadius;\n    y0 = globalState.centerY + Math.sin(randomStartAngle) * randomRadius;\n\n    dx = speed * Math.cos(randomDirection);\n    dy = speed * Math.sin(randomDirection);\n\n    // Predict final position to ensure it stays inside bounds\n    const finalx = x0 + dx * OBSERVATION_FRAMES;\n    const finaly = y0 + dy * OBSERVATION_FRAMES;\n    const finalRadius = Math.sqrt(\n      (finalx - globalState.centerX) ** 2 + (finaly - globalState.centerY) ** 2\n    );\n\n    isValid = isEasyMode\n      ? finalRadius > specialFinalRadius + 50 && finalRadius < GAME_RADIUS - 50\n      : finalRadius > 100 && finalRadius < GAME_RADIUS - 50;\n  } while (!isValid);\n\n  let value = sampleBeta(alphaParam, betaParam); // Random value between 0 and 1\n  if (isEasyMode) value *= 0.5; // Ensure value < 0.5 for easy mode\n\n  return {\n    x0,\n    y0,\n    radius: 15,\n    speed,\n    dX: dx,\n    dY: dy,\n    value,\n    isSelected: false,\n    selectionIndex: NaN,\n    isIntercepted: false,\n    index: globalState.objects.length, // Assign index dynamically\n  };\n}\n\n// Function to initialize the player\nexport function initializePlayer() {\n  let randomDirection;\n  let randomSpeed, randomRadius, randomStartAngle;\n  let x0, y0, dx, dy, speed, finalx, finaly;\n  x0 = globalState.centerX;\n  y0 = globalState.centerY;\n  //randomSpeed = randomGenerator() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED; // Speed between 50 and 100\n  randomSpeed = MAX_SPEED;\n  speed = (randomSpeed * speedMultiplier) / refreshRate;\n  dx = 0;\n  dy = 0;\n  globalState.player = {\n    x0: x0,\n    y0: y0,\n    radius: 15, // Radius of each animated object\n    speed: speed,\n    dX: dx,\n    dY: dy,\n    x: x0,\n    y: y0,\n  };\n}\n","import { globalState } from \"../global/variable\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing\";\nimport {\n  canvas,\n  replayButton,\n  reselectButton,\n  interceptionButton,\n} from \"../global/domElements\";\n\n// Function to handle mouse hover\nexport function handleMouseHover(event) {\n  const rect = canvas.getBoundingClientRect();\n  const mouseX = event.clientX - rect.left;\n  const mouseY = event.clientY - rect.top;\n\n  globalState.hoverObjectIndex = globalState.objects.findIndex(\n    (object) =>\n      Math.hypot(mouseX - object.x, mouseY - object.y) <= object.radius\n  );\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n}\n\n// Function to handle object selection\nexport function handleObjectSelection(event) {\n  const rect = canvas.getBoundingClientRect();\n  const mouseX = event.clientX - rect.left;\n  const mouseY = event.clientY - rect.top;\n\n  for (let object of globalState.objects) {\n    const distance = Math.hypot(mouseX - object.x, mouseY - object.y);\n    if (\n      distance <= object.radius &&\n      !object.isSelected &&\n      globalState.selectedObjects.length < globalState.NUM_SELECTIONS\n    ) {\n      object.isSelected = true;\n      object.selectionIndex = globalState.selectedObjects.length;\n      globalState.selectedObjects.push(object.index); // store the index of the object\n      drawObjects();\n\n      replayButton.disabled = true; // Disables the button\n\n      reselectButton.style.display = \"block\";\n      reselectButton.disabled = false;\n\n      if (globalState.selectedObjects.length === globalState.NUM_SELECTIONS) {\n        canvas.removeEventListener(\"click\", handleObjectSelection);\n        canvas.removeEventListener(\"mousemove\", handleMouseHover);\n        interceptionButton.style.display = \"block\";\n      }\n      break;\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.cbb1cd4b.js.map","sourceRoot":"/__parcel_source_root/"}