{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-996cf41a4b739b0b.js","src/main.js","src/global/domElements.js","src/global/constant.js","node_modules/@parcel/runtime-js/lib/runtime-2e035ccedd03b21b.js","src/global/variable.js","src/utils/utils.js","src/logic/computation/solutionEvaluator.js","src/logic/computation/interceptionSimulator.js","src/logic/gameEvents.js","src/logic/drawing.js","src/logic/animation.js","src/logic/initialize.js","src/logic/mouseEvents.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $d15571c6cd8c0fd2$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"28O89\\\",\\\"index.b925dbbc.js\\\",\\\"fF1JW\\\",\\\"player.f624445e.png\\\"]\"));\n\nconst $634bf96bf244cf3d$export$67ea982130081db = document.getElementById(\"gameCanvas\");\nconst $634bf96bf244cf3d$export$39f92e86d1722f3a = $634bf96bf244cf3d$export$67ea982130081db.getContext(\"2d\");\nconst $634bf96bf244cf3d$export$a80b3bd66acc52ff = document.getElementById(\"info\");\nconst $634bf96bf244cf3d$export$8e2e30872dc80405 = document.getElementById(\"aiinfo\");\nconst $634bf96bf244cf3d$export$567384caa8b9afae = document.getElementById(\"infocontent\");\nconst $634bf96bf244cf3d$export$c19513be8e47ff73 = document.getElementById(\"startButton\");\nconst $634bf96bf244cf3d$export$33dc6586297841e = document.getElementById(\"replayButton\");\nconst $634bf96bf244cf3d$export$5a59eaaccc02135 = document.getElementById(\"reselectButton\");\nconst $634bf96bf244cf3d$export$4f760a2b9bd47f03 = document.getElementById(\"interceptionButton\");\nconst $634bf96bf244cf3d$export$bb41c8132417f715 = document.getElementById(\"finishButton\");\nconst $634bf96bf244cf3d$export$3dad6ce5cda7739b = document.getElementById(\"aiRequest\");\n\n\n// Global Constants\nconst $a71a3dd6d29df2e8$export$6f3fae047b1a0dd3 = 60; // Assumed refresh rate\nconst $a71a3dd6d29df2e8$export$14a94e727fb829ce = Math.round(3000 * ($a71a3dd6d29df2e8$export$6f3fae047b1a0dd3 / 1000)); // 3000 ms for demo\nconst $a71a3dd6d29df2e8$export$2f21e52c8f58fbd5 = Math.round(2000 * ($a71a3dd6d29df2e8$export$6f3fae047b1a0dd3 / 1000)); // 2000 ms for interception\nconst $a71a3dd6d29df2e8$export$a550ff8ad0f4c70e = 1; // Multiplier to adjust speed based on refresh rate\nconst $a71a3dd6d29df2e8$export$4e0790bf022c0809 = 60;\nconst $a71a3dd6d29df2e8$export$c70b0eac69fbd48f = 120;\nconst $a71a3dd6d29df2e8$export$ded24318160dc6d4 = 1;\nconst $a71a3dd6d29df2e8$export$b22c2357393f87a4 = 2;\nconst $a71a3dd6d29df2e8$export$5161919d50d876bf = 400; // Radius of game circle\nconst $a71a3dd6d29df2e8$export$4c65df0ed87780b6 = 30;\nconst $a71a3dd6d29df2e8$export$9ed62adcfac87b3a = 12345; // Seed for random number generator\nconst $a71a3dd6d29df2e8$export$6cc6872c9c867038 = new Image();\nvar $4be721e055781202$exports = {};\n$4be721e055781202$exports = new URL(\"player.f624445e.png\", import.meta.url).toString();\n\n\n$a71a3dd6d29df2e8$export$6cc6872c9c867038.src = new URL($4be721e055781202$exports).href;\n\n\nconst $c4847625630a65f5$export$8e769ad4338a911e = {\n    NUM_SELECTIONS: 2,\n    NUM_OBJECTS: 5,\n    AI_HELP: 0,\n    curTrial: 0,\n    totalTrials: 1,\n    randomGenerator: null,\n    centerX: 0,\n    centerY: 0,\n    totalFrames: 0,\n    animationFrameId: 0,\n    animationStartTime: 0,\n    objects: [],\n    selectedObjects: [],\n    hoverObjectIndex: -1,\n    speedMultiplier: 1,\n    player: {\n        x0: 0,\n        y0: 0,\n        radius: 15,\n        speed: 0,\n        dX: 0,\n        dY: 0,\n        x: 0,\n        y: 0\n    },\n    permutations: [],\n    allSolutions: null,\n    bestSolution: null,\n    playerSolution: null,\n    interceptionCounter: 0,\n    interceptionFrame: 0,\n    canshowRequestAI: false\n}; /*\nallSolutions = [\n  {\n    sequence: [...],       // 序列（对象的索引列表）\n    totalValue: number,    // 该序列获得的总分数\n    moves: [               // 追踪玩家的拦截行动\n      {\n        success: boolean,       // 该拦截是否成功\n        value: number,          // 如果在圆内，拦截目标的得分\n        timeToIntercept: number,// 需要的帧数\n        dX: number,             // 玩家在 X 方向的移动速度\n        dY: number,             // 玩家在 Y 方向的移动速度\n        interceptPosX: number,  // 拦截点 X 坐标\n        interceptPosY: number,  // 拦截点 Y 坐标\n      },\n      ...\n    ]\n  },\n  ...\n];*/ \n\n\n\nfunction $c24a1a98a21ce8e1$export$49b9065228a93aae() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const params = {};\n    for (const [key, value] of searchParams.entries())params[key] = value;\n    return params;\n}\nfunction $c24a1a98a21ce8e1$export$5322bfe5932cd9f0(seed) {\n    const a = 1664525;\n    const c = 1013904223;\n    const m = Math.pow(2, 32);\n    let current = seed;\n    return function() {\n        current = (a * current + c) % m;\n        return current / m; // normalize to [0,1]\n    };\n}\nfunction $c24a1a98a21ce8e1$export$8684e6a2c7ce009e(alpha, beta) {\n    function sampleGamma(shape) {\n        // Marsaglia and Tsang method for sampling Gamma(shape, 1)\n        const d = shape - 1 / 3;\n        const c = 1 / Math.sqrt(9 * d);\n        let u, v;\n        do {\n            do {\n                u = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator();\n                v = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator() * 2 - 1; // Uniformly distributed in (-1, 1)\n            }while (u <= 0);\n            const x = Math.pow(1 + c * v, 3);\n            if (x > 0 && Math.log(u) < 0.5 * v * v + d * (1 - x + Math.log(x))) return d * x;\n        }while (true);\n    }\n    const x = sampleGamma(alpha);\n    const y = sampleGamma(beta);\n    return x / (x + y); // Transform Gamma samples to Beta\n}\n\n\n\n\n\n\nfunction $8ad3900a5eaa809f$export$39ab88f3d0eeff82(isInProgress, playerPosX, playerPosY, playerSpeed, objectPosX, objectPosY, objectVelX, objectVelY) {\n    let success = false;\n    let travelTime = Infinity;\n    let interceptPosX = NaN, interceptPosY = NaN;\n    // let totalDistanceTraveled = Infinity;\n    let finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY;\n    // If interception is already over, compute final distance at the circle boundary\n    if (!isInProgress) return $8ad3900a5eaa809f$var$computeNoInterceptCase(playerPosX, playerPosY, objectPosX, objectPosY, objectVelX, objectVelY);\n    // Compute interception time using quadratic formula\n    let [hasSolution, t1, t2] = $8ad3900a5eaa809f$var$solveQuadraticEquation(objectVelX ** 2 + objectVelY ** 2 - playerSpeed ** 2, 2 * ((objectPosX - playerPosX) * objectVelX + (objectPosY - playerPosY) * objectVelY), (objectPosX - playerPosX) ** 2 + (objectPosY - playerPosY) ** 2);\n    // If no valid interception time exists, handle failure case\n    if (!hasSolution) return $8ad3900a5eaa809f$var$computeNoInterceptCase(playerPosX, playerPosY, objectPosX, objectPosY, objectVelX, objectVelY);\n    // Select the smallest valid interception time\n    travelTime = t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n    if (travelTime === Infinity) return $8ad3900a5eaa809f$var$computeNoInterceptCase(playerPosX, playerPosY, objectPosX, objectPosY, objectVelX, objectVelY);\n    // Compute interception position\n    interceptPosX = objectPosX + travelTime * objectVelX;\n    interceptPosY = objectPosY + travelTime * objectVelY;\n    // totalDistanceTraveled = travelTime * playerSpeed;\n    // Compute final distance at the circle boundary\n    [finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY] = $8ad3900a5eaa809f$var$computeFinalDistanceAtCircleBoundary(playerPosX, playerPosY, (interceptPosX - playerPosX) / Math.round(travelTime), (interceptPosY - playerPosY) / Math.round(travelTime), objectPosX, objectPosY, objectVelX, objectVelY);\n    // Check if interception is within the circle\n    success = $8ad3900a5eaa809f$var$isWithinCircle(interceptPosX, interceptPosY);\n    // Adjust return values based on interception success\n    if (!success) {\n        interceptPosX = circleBoundaryX;\n        interceptPosY = circleBoundaryY;\n        travelTime = timeToCircle;\n    } else finalDistanceAtCircle = 0;\n    return [\n        success,\n        travelTime,\n        interceptPosX,\n        interceptPosY,\n        finalDistanceAtCircle\n    ];\n}\n/**\n * Handles the case where interception is impossible.\n */ function $8ad3900a5eaa809f$var$computeNoInterceptCase(playerPosX, playerPosY, objectPosX, objectPosY, objectVelX, objectVelY) {\n    return $8ad3900a5eaa809f$var$computeFinalDistanceAtCircleBoundary(playerPosX, playerPosY, 0, 0, objectPosX, objectPosY, objectVelX, objectVelY);\n}\n/**\n * Computes whether a point is inside the circle.\n */ function $8ad3900a5eaa809f$var$isWithinCircle(x, y) {\n    return Math.sqrt((x - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX) ** 2 + (y - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY) ** 2) <= (0, $a71a3dd6d29df2e8$export$5161919d50d876bf);\n}\n/**\n * Computes player's movement to the circle boundary and final distance to object.\n */ function $8ad3900a5eaa809f$var$computeFinalDistanceAtCircleBoundary(playerPosX, playerPosY, playerVelX, playerVelY, objectPosX, objectPosY, objectVelX, objectVelY) {\n    if (Math.abs(playerVelX) < 1e-6 && Math.abs(playerVelY) < 1e-6) [playerVelX, playerVelY] = $8ad3900a5eaa809f$var$computeDirectionVector(playerPosX, playerPosY, objectPosX, objectPosY);\n    let [timeToCircle, circleBoundaryX, circleBoundaryY] = $8ad3900a5eaa809f$var$computePlayerDistanceToCircleBoundary(playerPosX, playerPosY, playerVelX, playerVelY);\n    let objectFutureX = objectPosX + timeToCircle * objectVelX;\n    let objectFutureY = objectPosY + timeToCircle * objectVelY;\n    let finalDistanceAtCircle = Math.sqrt((objectFutureX - circleBoundaryX) ** 2 + (objectFutureY - circleBoundaryY) ** 2);\n    return [\n        finalDistanceAtCircle,\n        timeToCircle,\n        circleBoundaryX,\n        circleBoundaryY\n    ];\n}\n/**\n * Computes a normalized direction vector from (startX, startY) to (targetX, targetY).\n */ function $8ad3900a5eaa809f$var$computeDirectionVector(startX, startY, targetX, targetY) {\n    let dirX = targetX - startX;\n    let dirY = targetY - startY;\n    let magnitude = Math.sqrt(dirX ** 2 + dirY ** 2);\n    return magnitude > 1e-6 ? [\n        dirX / magnitude,\n        dirY / magnitude\n    ] : [\n        0,\n        0\n    ];\n}\n/**\n * Computes the player's distance to the circle boundary using quadratic intersection.\n */ function $8ad3900a5eaa809f$var$computePlayerDistanceToCircleBoundary(playerPosX, playerPosY, playerVelX, playerVelY) {\n    let centerX = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX;\n    let centerY = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY;\n    let playerDistToCenter = Math.sqrt((playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2);\n    if (Math.abs(playerDistToCenter - (0, $a71a3dd6d29df2e8$export$5161919d50d876bf)) < 1e-6) return [\n        0,\n        playerPosX,\n        playerPosY\n    ];\n    let [hasSolution, t1, t2] = $8ad3900a5eaa809f$var$solveQuadraticEquation(playerVelX ** 2 + playerVelY ** 2, 2 * ((playerPosX - centerX) * playerVelX + (playerPosY - centerY) * playerVelY), (playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2 - (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) ** 2);\n    if (!hasSolution) {\n        console.warn(\"\\uD83D\\uDEA8 Player's movement does not reach the circle boundary.\");\n        return [\n            Infinity,\n            NaN,\n            NaN\n        ];\n    }\n    let timeToCircle = t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n    if (timeToCircle === Infinity) {\n        console.warn(\"\\uD83D\\uDEA8 Player is moving away from the circle.\");\n        return [\n            Infinity,\n            NaN,\n            NaN\n        ];\n    }\n    return [\n        timeToCircle,\n        playerPosX + timeToCircle * playerVelX,\n        playerPosY + timeToCircle * playerVelY\n    ];\n}\n/**\n * Solves a quadratic equation Ax^2 + Bx + C = 0 and returns [hasSolution, t1, t2].\n */ function $8ad3900a5eaa809f$var$solveQuadraticEquation(A, B, C) {\n    let discriminant = B ** 2 - 4 * A * C;\n    if (discriminant < 0) return [\n        false,\n        NaN,\n        NaN\n    ];\n    let sqrtD = Math.sqrt(discriminant);\n    return [\n        true,\n        (-B + sqrtD) / (2 * A),\n        (-B - sqrtD) / (2 * A)\n    ];\n}\n\n\nfunction $0fe02c20e88f8b06$export$c2e8d36f4b1181be(arr, k) {\n    const result = [];\n    function helper(currentPermutation) {\n        // If the current permutation is of length k, add it to the result\n        if (currentPermutation.length === k) {\n            result.push([\n                ...currentPermutation\n            ]);\n            return;\n        }\n        for(let i = 0; i < arr.length; i++){\n            if (currentPermutation.includes(arr[i])) continue; // Skip duplicates\n            helper([\n                ...currentPermutation,\n                arr[i]\n            ]); // Recursive call with new element added\n        }\n    }\n    helper([]); // Start recursion with an empty permutation\n    return result;\n}\nfunction $0fe02c20e88f8b06$export$8bda0e8d4d506ab8() {\n    for(let i = 0; i < (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS; i++)console.log(`Object selected ${i} = ${(0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects[i]}`);\n    // Find the index of the matching permutation\n    const matchingIndex = $0fe02c20e88f8b06$var$findMatchingPermutationIndex((0, $c4847625630a65f5$export$8e769ad4338a911e).permutations, (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects);\n    let playerSolution;\n    console.log(`Matching index: ${matchingIndex}`);\n    if (matchingIndex !== -1) {\n        console.log(`Matching permutation:`, (0, $c4847625630a65f5$export$8e769ad4338a911e).permutations[matchingIndex]);\n        playerSolution = (0, $c4847625630a65f5$export$8e769ad4338a911e).allSolutions[matchingIndex];\n    } else console.log(`No matching permutation found.`);\n    return playerSolution;\n}\nfunction $0fe02c20e88f8b06$var$findMatchingPermutationIndex(permutations, selectedObjects) {\n    return permutations.findIndex((permutation)=>permutation.length === selectedObjects.length && permutation.every((value, index)=>value === selectedObjects[index]));\n}\nfunction $0fe02c20e88f8b06$export$330ce1172ea51cd7() {\n    const numSequences = (0, $c4847625630a65f5$export$8e769ad4338a911e).permutations.length;\n    let allSolutions = [];\n    let bestSolutionIndex = -1;\n    let maxValue = -Infinity;\n    for(let i = 0; i < numSequences; i++){\n        let sequence = (0, $c4847625630a65f5$export$8e769ad4338a911e).permutations[i];\n        // Clone objects and player to simulate movement\n        let copyObjects = structuredClone((0, $c4847625630a65f5$export$8e769ad4338a911e).objects);\n        let copyPlayer = structuredClone((0, $c4847625630a65f5$export$8e769ad4338a911e).player);\n        let totalValue = 0;\n        let moves = [];\n        let isInProgress = true; // Interception is still active\n        for(let j = 0; j < (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS; j++){\n            const id = sequence[j];\n            const objectNow = copyObjects[id];\n            let [success, timeToIntercept, interceptPosX, interceptPosY, finalDistanceAtCircle] = (0, $8ad3900a5eaa809f$export$39ab88f3d0eeff82)(isInProgress, copyPlayer.x, copyPlayer.y, copyPlayer.speed, objectNow.x, objectNow.y, objectNow.dX, objectNow.dY);\n            // Move player and objects if still intercepting\n            if (isInProgress) {\n                let move = $0fe02c20e88f8b06$var$processMove(success, timeToIntercept, copyPlayer, interceptPosX, interceptPosY, copyObjects);\n                moves.push(move);\n            }\n            // Compute score for this object\n            let valueNow = $0fe02c20e88f8b06$var$computeObjectValue(objectNow, success, finalDistanceAtCircle, j, isInProgress);\n            totalValue += valueNow;\n            // If interception fails, mark as not in progress\n            if (!success && isInProgress) isInProgress = false;\n        }\n        let solution = {\n            sequence: sequence,\n            totalValue: totalValue,\n            moves: moves\n        };\n        allSolutions.push(solution);\n        // Update best solution\n        if (totalValue > maxValue) {\n            bestSolutionIndex = i;\n            maxValue = totalValue;\n        }\n    }\n    // Normalize scores based on the best solution\n    $0fe02c20e88f8b06$var$normalizeSolutionValues(allSolutions, maxValue);\n    // Logging best solution\n    $0fe02c20e88f8b06$var$logSolutions(allSolutions, bestSolutionIndex, maxValue);\n    return [\n        allSolutions,\n        allSolutions[bestSolutionIndex]\n    ];\n}\n/**\n * Processes a move when interception is successful.\n */ function $0fe02c20e88f8b06$var$processMove(success, timeToIntercept, player, interceptPosX, interceptPosY, objects) {\n    let move = {\n        success: success\n    };\n    // Round the time to intercept\n    timeToIntercept = Math.round(timeToIntercept);\n    move.timeToIntercept = timeToIntercept;\n    // Compute movement step size\n    move.dX = (interceptPosX - player.x) / timeToIntercept;\n    move.dY = (interceptPosY - player.y) / timeToIntercept;\n    // Move player\n    player.x += timeToIntercept * move.dX;\n    player.y += timeToIntercept * move.dY;\n    move.interceptPosX = player.x;\n    move.interceptPosY = player.y;\n    // Move all objects\n    for (let obj of objects){\n        obj.x += timeToIntercept * obj.dX;\n        obj.y += timeToIntercept * obj.dY;\n    }\n    return move;\n}\n/**\n * Computes the value of the object based on whether interception was successful.\n */ function $0fe02c20e88f8b06$var$computeObjectValue(object, success, finalDistanceAtCircle, selectionIndex, isInProgress) {\n    if (success) return object.value;\n    // Apply weight-based scoring for missed interceptions\n    let weight = 0.5 * ((0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS - selectionIndex);\n    let scaledValue = ((0, $a71a3dd6d29df2e8$export$5161919d50d876bf) * 2 - finalDistanceAtCircle) / ((0, $a71a3dd6d29df2e8$export$5161919d50d876bf) * 2) * object.value * weight;\n    return isInProgress ? scaledValue : 0; // If no longer in progress, weight is applied\n}\n/**\n * Normalizes all solution values relative to the maximum.\n */ function $0fe02c20e88f8b06$var$normalizeSolutionValues(solutions, maxValue) {\n    for (let sol of solutions)sol.totalValueProp = sol.totalValue / maxValue;\n}\n/**\n * Logs all solutions and the best one.\n */ function $0fe02c20e88f8b06$var$logSolutions(solutions, bestSolutionIndex, maxValue) {\n    console.log(`\n\\u{1F539} All Solutions Summary:`);\n    solutions.forEach((sol, i)=>{\n        console.log(`${i}: Sequence ${sol.sequence}, Score: ${sol.totalValue.toFixed(2)}`);\n        sol.moves.forEach((move, index)=>{\n            console.log(`   \\u{21B3} Move ${index}: success=${move.success}`);\n        });\n    });\n    console.log(`\n\\u{1F3C6} Best solution = ${(0, $c4847625630a65f5$export$8e769ad4338a911e).permutations[bestSolutionIndex]}, maxValue = ${maxValue.toFixed(2)}`);\n}\n\n\n\n\n\n\n\nfunction $f63559ac802d5fcd$export$11d3ee96f5a8c2cf() {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.forEach((object)=>{\n        if (!object.isIntercepted) {\n            const arrowLength = Math.sqrt(object.dX ** 2 + object.dY ** 2) * (0, $a71a3dd6d29df2e8$export$4c65df0ed87780b6); // Scale speed for arrow length\n            const angle = Math.atan2(object.dY, object.dX);\n            const startX = object.x;\n            const startY = object.y;\n            const endX = startX + arrowLength * Math.cos(angle);\n            const endY = startY + arrowLength * Math.sin(angle);\n            // Draw the main arrow line\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).moveTo(startX, startY);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(endX, endY);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineWidth = 2;\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).strokeStyle = \"gray\";\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).stroke();\n            // Draw the arrowhead\n            const arrowheadLength = 12;\n            const arrowheadAngle = Math.PI / 6;\n            const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n            const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n            const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n            const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).moveTo(endX, endY);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(leftX, leftY);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(rightX, rightY);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).closePath();\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"gray\";\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n        }\n    });\n}\nfunction $f63559ac802d5fcd$export$eb99d37f0efeddf7() {\n    // Draw the player arrow\n    const arrowLength = Math.sqrt((0, $c4847625630a65f5$export$8e769ad4338a911e).player.dX ** 2 + (0, $c4847625630a65f5$export$8e769ad4338a911e).player.dY ** 2) * (0, $a71a3dd6d29df2e8$export$4c65df0ed87780b6); // Scale speed for arrow length\n    const angle = Math.atan2((0, $c4847625630a65f5$export$8e769ad4338a911e).player.dY, (0, $c4847625630a65f5$export$8e769ad4338a911e).player.dX);\n    const startX = (0, $c4847625630a65f5$export$8e769ad4338a911e).player.x;\n    const startY = (0, $c4847625630a65f5$export$8e769ad4338a911e).player.y;\n    const endX = startX + arrowLength * Math.cos(angle);\n    const endY = startY + arrowLength * Math.sin(angle);\n    // Draw the main arrow line\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).moveTo(startX, startY);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(endX, endY);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineWidth = 2;\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).strokeStyle = \"gray\";\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).stroke();\n    // Draw the arrowhead\n    const arrowheadLength = 12;\n    const arrowheadAngle = Math.PI / 6;\n    const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n    const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n    const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n    const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).moveTo(endX, endY);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(leftX, leftY);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineTo(rightX, rightY);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).closePath();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"gray\";\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n}\nfunction $f63559ac802d5fcd$export$dbee4337d98e454a() {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.forEach((object, index)=>{\n        if (!object.isIntercepted) {\n            // Highlight object if hovered\n            if (index === (0, $c4847625630a65f5$export$8e769ad4338a911e).hoverObjectIndex) {\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc(object.x, object.y, object.radius + 5, 0, Math.PI * 2);\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"rgba(255, 0, 0, 0.3)\"; // Glow effect\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n            }\n            // Draw the object's filled area\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc(object.x, object.y, object.radius * object.value, 0, Math.PI * 2);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"red\";\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n            // Set text alignment and baseline for centering\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).textAlign = \"center\"; // Aligns text horizontally to the center\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).textBaseline = \"middle\"; // Aligns text vertically to the center\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"rgb(0, 0, 0)\";\n            let fontSize = 20;\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).font = `${fontSize}px Arial`;\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillText(index, object.x, object.y);\n            // Draw the object's border\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc(object.x, object.y, object.radius, 0, Math.PI * 2);\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineWidth = 3;\n            //ctx.fillStyle = 'rgba(14, 13, 13, 0.3)'; // Glow effect\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).strokeStyle = \"red\";\n            (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).stroke();\n            //ctx.fill();\n            // Draw selection number if selected\n            if (object.isSelected) {\n                const selectionIndex = object.selectionIndex;\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"black\";\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).font = \"24px Arial\";\n                (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillText(selectionIndex + 1, object.x + object.radius + 14, object.y + 8);\n            }\n            if ((0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI) {\n                let AISelectionIndex = (0, $c4847625630a65f5$export$8e769ad4338a911e).bestSolution.sequence.indexOf(index);\n                if (AISelectionIndex !== -1) {\n                    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"blue\";\n                    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).font = \"24px Arial\";\n                    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillText(AISelectionIndex + 1, object.x - object.radius - 20, object.y + 8);\n                }\n            }\n        }\n    });\n    // Draw arrows for all objects\n    $f63559ac802d5fcd$export$11d3ee96f5a8c2cf();\n}\nfunction $f63559ac802d5fcd$export$941190eab9b1306e() {\n    // Draw the player image\n    if ((0, $a71a3dd6d29df2e8$export$6cc6872c9c867038).complete && (0, $a71a3dd6d29df2e8$export$6cc6872c9c867038).naturalWidth !== 0) {\n        // Ensure the image is loaded before drawing\n        const imageWidth = 60; // Adjust the size of the image\n        const imageHeight = 60;\n        (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).drawImage((0, $a71a3dd6d29df2e8$export$6cc6872c9c867038), (0, $c4847625630a65f5$export$8e769ad4338a911e).player.x - imageWidth / 2, (0, $c4847625630a65f5$export$8e769ad4338a911e).player.y - imageHeight / 2, imageWidth, imageHeight);\n    } else {\n        // Fallback in case the image hasn't loaded yet\n        (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n        (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc((0, $c4847625630a65f5$export$8e769ad4338a911e).player.x, (0, $c4847625630a65f5$export$8e769ad4338a911e).player.y, (0, $c4847625630a65f5$export$8e769ad4338a911e).player.radius, 0, Math.PI * 2);\n        (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"blue\";\n        (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n    }\n}\nfunction $f63559ac802d5fcd$export$c49e56ba66dbb552() {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX = (0, $634bf96bf244cf3d$export$67ea982130081db).width / 2;\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY = (0, $634bf96bf244cf3d$export$67ea982130081db).height / 2;\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).save(); // Save the current canvas state\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc((0, $c4847625630a65f5$export$8e769ad4338a911e).centerX, (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY, (0, $a71a3dd6d29df2e8$export$5161919d50d876bf), 0, Math.PI * 2); // Define the clipping path\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).clip(); // Apply clipping to restrict drawings to this area\n    // Draw the main circle\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).beginPath();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).arc((0, $c4847625630a65f5$export$8e769ad4338a911e).centerX, (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY, (0, $a71a3dd6d29df2e8$export$5161919d50d876bf), 0, Math.PI * 2);\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fillStyle = \"white\";\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).fill();\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).lineWidth = 5;\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).strokeStyle = \"black\";\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).stroke();\n}\nfunction $f63559ac802d5fcd$export$a1c066623ac679d3() {\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).restore(); // Restore to the original canvas state\n    (0, $634bf96bf244cf3d$export$39f92e86d1722f3a).clearRect(0, 0, (0, $634bf96bf244cf3d$export$67ea982130081db).width, (0, $634bf96bf244cf3d$export$67ea982130081db).height);\n}\n\n\n\n\n\n\n\nfunction $a6e5cb9280750852$export$6ab2b06ec414ff32() {\n    // Update positions and redraw\n    $a6e5cb9280750852$var$updateObjectPositions((0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames);\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n    (0, $f63559ac802d5fcd$export$941190eab9b1306e)();\n    // Increment frame counter\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames++;\n    // Continue animation or end demo\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames < (0, $a71a3dd6d29df2e8$export$14a94e727fb829ce)) (0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId = requestAnimationFrame($a6e5cb9280750852$export$6ab2b06ec414ff32);\n    else (0, $dc92eabc72a21f55$export$e564fb356150ddb)();\n}\nfunction $a6e5cb9280750852$export$462d46774333aa1c() {\n    // Update positions and redraw\n    $a6e5cb9280750852$var$updateObjectPositions((0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames);\n    let [status, success] = $a6e5cb9280750852$var$updatePlayerPosition();\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n    (0, $f63559ac802d5fcd$export$941190eab9b1306e)(); // temp\n    // Increment frame counter\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames++;\n    // Is the player still within the game area?\n    let isInCircle = Math.sqrt(((0, $c4847625630a65f5$export$8e769ad4338a911e).player.x - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX) ** 2 + ((0, $c4847625630a65f5$export$8e769ad4338a911e).player.y - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY) ** 2) <= (0, $a71a3dd6d29df2e8$export$5161919d50d876bf);\n    // Continue animation or end interception sequence\n    if (isInCircle && status == \"in progress\") (0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId = requestAnimationFrame($a6e5cb9280750852$export$462d46774333aa1c);\n    else $a6e5cb9280750852$var$finishTrial(isInCircle, success);\n}\nfunction $a6e5cb9280750852$var$finishTrial(isInCircle, success) {\n    console.log(`Finished interception sequence`);\n    cancelAnimationFrame((0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId);\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).curTrial === (0, $c4847625630a65f5$export$8e769ad4338a911e).totalTrials) (0, $634bf96bf244cf3d$export$bb41c8132417f715).style.display = \"block\";\n    else (0, $634bf96bf244cf3d$export$c19513be8e47ff73).style.display = \"block\";\n    let valNow = Math.round((0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution.totalValueProp * 100);\n    if (!isInCircle || !success) (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = `<p>Reached outside of the circle</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n    else (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = `<p>Finished interception sequence</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n}\n// Function to update object positions\nfunction $a6e5cb9280750852$var$updateObjectPositions(frame) {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.forEach((object)=>{\n        // Update object's position based on its speed\n        object.x = object.x0 + frame * object.dX;\n        object.y = object.y0 + frame * object.dY;\n    });\n}\nfunction $a6e5cb9280750852$var$updatePlayerPosition() {\n    let currentMove = (0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution.moves[(0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter]; // object that contains all information for intercepting the current object\n    let currentObject = (0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution.sequence[(0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter];\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionFrame += 1;\n    let status = \"in progress\";\n    let success = false;\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionFrame == currentMove.timeToIntercept) {\n        success = currentMove.success;\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).objects[currentObject].isIntercepted = currentMove.success;\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionFrame = 0; // reset counter for the next object\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter += 1;\n        if ((0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter < (0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution.moves.length) currentMove = (0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution.moves[(0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter];\n        else {\n            console.log(\"Finished with interception sequence\");\n            status = \"finished\";\n            return [\n                status,\n                success\n            ];\n        }\n    }\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).player.x += currentMove.dX;\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).player.y += currentMove.dY;\n    return [\n        status,\n        success\n    ];\n}\n\n\n\n\n\nfunction $fdab832ea30fed45$export$bd6e6cf24b6a474b(isEasyMode) {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).objects = [];\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects = []; // Reset selections\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).hoverObjectIndex = -1; // Reset hover index\n    const numObjects = (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_OBJECTS;\n    const specialSpeed = ((0, $a71a3dd6d29df2e8$export$c70b0eac69fbd48f) - (0, $a71a3dd6d29df2e8$export$4e0790bf022c0809)) * (0, $a71a3dd6d29df2e8$export$a550ff8ad0f4c70e) / (0, $a71a3dd6d29df2e8$export$6f3fae047b1a0dd3);\n    const offsetX = (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) - (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) / 5; // Position special objects near the edge\n    const specialFinalRadius = Math.abs((0, $c4847625630a65f5$export$8e769ad4338a911e).centerX - (offsetX - specialSpeed * (0, $a71a3dd6d29df2e8$export$14a94e727fb829ce)));\n    // 1️⃣ **Create two special objects (Left & Right, moving toward the center)**\n    if (isEasyMode) $fdab832ea30fed45$var$createSpecialObjects(specialSpeed, offsetX);\n    // 2️⃣ **Create remaining random objects (far from the center, low value)**\n    for(let i = isEasyMode ? 2 : 0; i < numObjects; i++){\n        let newObject = $fdab832ea30fed45$var$generateRandomObject(isEasyMode, specialFinalRadius);\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.push(newObject);\n    }\n}\n/**\n * Creates two special objects that move toward the center.\n */ function $fdab832ea30fed45$var$createSpecialObjects(specialSpeed, offsetX) {\n    const specialObjects = [\n        {\n            x0: (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX - offsetX,\n            dX: specialSpeed,\n            y0: (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY,\n            dY: 0\n        },\n        {\n            x0: (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX + offsetX,\n            dX: -specialSpeed,\n            y0: (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY,\n            dY: 0\n        }\n    ];\n    for(let i = 0; i < specialObjects.length; i++){\n        const { x0: x0, y0: y0, dX: dX, dY: dY } = specialObjects[i];\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.push({\n            x0: x0,\n            y0: y0,\n            radius: 15,\n            speed: specialSpeed,\n            dX: dX,\n            dY: dY,\n            value: 0.7,\n            isSelected: false,\n            selectionIndex: NaN,\n            isIntercepted: false,\n            index: i\n        });\n    }\n}\n/**\n * Generates a random object positioned far from the center.\n */ function $fdab832ea30fed45$var$generateRandomObject(isEasyMode, specialFinalRadius) {\n    let x0, y0, dx, dy, speed;\n    let isValid = false;\n    do {\n        let randomDirection = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator() * Math.PI * 2;\n        let randomSpeed = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator() * ((0, $a71a3dd6d29df2e8$export$c70b0eac69fbd48f) - (0, $a71a3dd6d29df2e8$export$4e0790bf022c0809)) + (0, $a71a3dd6d29df2e8$export$4e0790bf022c0809);\n        let randomRadius = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator() * ((0, $a71a3dd6d29df2e8$export$5161919d50d876bf) * 0.6) + (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) / 3;\n        let randomStartAngle = (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator() * Math.PI * 2;\n        speed = randomSpeed * (0, $a71a3dd6d29df2e8$export$a550ff8ad0f4c70e) / (0, $a71a3dd6d29df2e8$export$6f3fae047b1a0dd3);\n        x0 = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX + Math.cos(randomStartAngle) * randomRadius;\n        y0 = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY + Math.sin(randomStartAngle) * randomRadius;\n        dx = speed * Math.cos(randomDirection);\n        dy = speed * Math.sin(randomDirection);\n        // Predict final position to ensure it stays inside bounds\n        const finalx = x0 + dx * (0, $a71a3dd6d29df2e8$export$14a94e727fb829ce);\n        const finaly = y0 + dy * (0, $a71a3dd6d29df2e8$export$14a94e727fb829ce);\n        const finalRadius = Math.sqrt((finalx - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX) ** 2 + (finaly - (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY) ** 2);\n        isValid = isEasyMode ? finalRadius > specialFinalRadius + 50 && finalRadius < (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) - 50 : finalRadius > 100 && finalRadius < (0, $a71a3dd6d29df2e8$export$5161919d50d876bf) - 50;\n    }while (!isValid);\n    let value = (0, $c24a1a98a21ce8e1$export$8684e6a2c7ce009e)((0, $a71a3dd6d29df2e8$export$ded24318160dc6d4), (0, $a71a3dd6d29df2e8$export$b22c2357393f87a4)); // Random value between 0 and 1\n    if (isEasyMode) value *= 0.5; // Ensure value < 0.5 for easy mode\n    return {\n        x0: x0,\n        y0: y0,\n        radius: 15,\n        speed: speed,\n        dX: dx,\n        dY: dy,\n        value: value,\n        isSelected: false,\n        selectionIndex: NaN,\n        isIntercepted: false,\n        index: (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.length\n    };\n}\nfunction $fdab832ea30fed45$export$36a99d944510668e() {\n    let randomDirection;\n    let randomSpeed, randomRadius, randomStartAngle;\n    let x0, y0, dx, dy, speed, finalx, finaly;\n    x0 = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerX;\n    y0 = (0, $c4847625630a65f5$export$8e769ad4338a911e).centerY;\n    //randomSpeed = randomGenerator() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED; // Speed between 50 and 100\n    randomSpeed = (0, $a71a3dd6d29df2e8$export$c70b0eac69fbd48f);\n    speed = randomSpeed * (0, $a71a3dd6d29df2e8$export$a550ff8ad0f4c70e) / (0, $a71a3dd6d29df2e8$export$6f3fae047b1a0dd3);\n    dx = 0;\n    dy = 0;\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).player = {\n        x0: x0,\n        y0: y0,\n        radius: 15,\n        speed: speed,\n        dX: dx,\n        dY: dy,\n        x: x0,\n        y: y0\n    };\n}\n\n\n\n\n\nfunction $a120aba6070f2bcc$export$5a2db02f125d5880(event) {\n    const rect = (0, $634bf96bf244cf3d$export$67ea982130081db).getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).hoverObjectIndex = (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.findIndex((object)=>Math.hypot(mouseX - object.x, mouseY - object.y) <= object.radius);\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n    (0, $f63559ac802d5fcd$export$941190eab9b1306e)();\n}\nfunction $a120aba6070f2bcc$export$15e953eb503541f6(event) {\n    const rect = (0, $634bf96bf244cf3d$export$67ea982130081db).getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    for (let object of (0, $c4847625630a65f5$export$8e769ad4338a911e).objects){\n        const distance = Math.hypot(mouseX - object.x, mouseY - object.y);\n        if (distance <= object.radius && !object.isSelected && (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects.length < (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS) {\n            object.isSelected = true;\n            object.selectionIndex = (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects.length;\n            (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects.push(object.index); // store the index of the object\n            (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n            (0, $634bf96bf244cf3d$export$33dc6586297841e).disabled = true; // Disables the button\n            (0, $634bf96bf244cf3d$export$5a59eaaccc02135).style.display = \"block\";\n            (0, $634bf96bf244cf3d$export$5a59eaaccc02135).disabled = false;\n            if ((0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects.length === (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS) {\n                (0, $634bf96bf244cf3d$export$67ea982130081db).removeEventListener(\"click\", $a120aba6070f2bcc$export$15e953eb503541f6);\n                (0, $634bf96bf244cf3d$export$67ea982130081db).removeEventListener(\"mousemove\", $a120aba6070f2bcc$export$5a2db02f125d5880);\n                (0, $634bf96bf244cf3d$export$4f760a2b9bd47f03).style.display = \"block\";\n            }\n            break;\n        }\n    }\n}\n\n\n\nfunction $dc92eabc72a21f55$export$feb4998fe7c4a8d() {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).curTrial++;\n    console.log(`------curTrail: ${(0, $c4847625630a65f5$export$8e769ad4338a911e).curTrial}---------`);\n    // Hide the start round button\n    (0, $634bf96bf244cf3d$export$c19513be8e47ff73).style.display = \"none\";\n    (0, $634bf96bf244cf3d$export$c19513be8e47ff73).blur();\n    (0, $634bf96bf244cf3d$export$3dad6ce5cda7739b).disabled = true;\n    // Update the info div\n    (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = \"<p>Example sequence in progress...</p>\";\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI = false;\n    // Initialize the objects and the player positions, direction and speed\n    (0, $fdab832ea30fed45$export$bd6e6cf24b6a474b)((0, $c4847625630a65f5$export$8e769ad4338a911e).curTrial === 1);\n    (0, $fdab832ea30fed45$export$36a99d944510668e)();\n    // Reset frame counter for the demo\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames = 0;\n    // Start the animation\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId = requestAnimationFrame((0, $a6e5cb9280750852$export$6ab2b06ec414ff32));\n}\nfunction $dc92eabc72a21f55$export$811b6501893cfef3() {\n    for (let index of (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects){\n        let object = (0, $c4847625630a65f5$export$8e769ad4338a911e).objects.find((obj)=>obj.index === index);\n        if (object) {\n            object.isSelected = false;\n            delete object.selectionIndex;\n        }\n    }\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).hoverObjectIndex = -1;\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).selectedObjects = [];\n    (0, $634bf96bf244cf3d$export$67ea982130081db).addEventListener(\"click\", (0, $a120aba6070f2bcc$export$15e953eb503541f6));\n    (0, $634bf96bf244cf3d$export$67ea982130081db).addEventListener(\"mousemove\", (0, $a120aba6070f2bcc$export$5a2db02f125d5880));\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n    (0, $f63559ac802d5fcd$export$941190eab9b1306e)();\n    (0, $634bf96bf244cf3d$export$4f760a2b9bd47f03).style.display = \"none\";\n    (0, $634bf96bf244cf3d$export$5a59eaaccc02135).disabled = true;\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).disabled = false;\n}\nfunction $dc92eabc72a21f55$export$d1e076093e0872ec() {\n    (0, $634bf96bf244cf3d$export$5a59eaaccc02135).style.display = \"none\";\n    (0, $634bf96bf244cf3d$export$4f760a2b9bd47f03).style.display = \"none\"; // Hide the interception button\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).style.display = \"none\";\n    (0, $634bf96bf244cf3d$export$3dad6ce5cda7739b).style.display = \"none\";\n    //aiRequest.disabled = true; // Disables the button\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).playerSolution = (0, $0fe02c20e88f8b06$export$8bda0e8d4d506ab8)();\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionCounter = 0; // the index of the interception path\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).interceptionFrame = 0;\n    (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = \"<p>Interception sequence in progress...</p>\";\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI = false;\n    // Start the interception animation\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId = requestAnimationFrame((0, $a6e5cb9280750852$export$462d46774333aa1c));\n}\nfunction $dc92eabc72a21f55$export$e564fb356150ddb() {\n    cancelAnimationFrame((0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId);\n    (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = `<p><center>OR</center></p><p>When ready, click on ${(0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS} objects to determine the order of interception. The goal is to maximize the point value across successfully intercepted objects</p>`;\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 1) (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML += `<p>The suggested AI solution is shown in blue </p>`;\n    (0, $634bf96bf244cf3d$export$67ea982130081db).addEventListener(\"click\", (0, $a120aba6070f2bcc$export$15e953eb503541f6));\n    (0, $634bf96bf244cf3d$export$67ea982130081db).addEventListener(\"mousemove\", (0, $a120aba6070f2bcc$export$5a2db02f125d5880));\n    // Show the replay button\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).disabled = false; // enables the button\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).style.display = \"block\";\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).addEventListener(\"click\", $dc92eabc72a21f55$export$bf38e2ded79c0319);\n    [(0, $c4847625630a65f5$export$8e769ad4338a911e).allSolutions, (0, $c4847625630a65f5$export$8e769ad4338a911e).bestSolution] = (0, $0fe02c20e88f8b06$export$330ce1172ea51cd7)();\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 2) {\n        (0, $634bf96bf244cf3d$export$3dad6ce5cda7739b).style.display = \"block\";\n        (0, $634bf96bf244cf3d$export$3dad6ce5cda7739b).disabled = false;\n    }\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 1) (0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI = true;\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n    (0, $f63559ac802d5fcd$export$941190eab9b1306e)();\n}\nfunction $dc92eabc72a21f55$export$bf38e2ded79c0319() {\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI = false;\n    (0, $634bf96bf244cf3d$export$33dc6586297841e).disabled = true; // Disables the button\n    //replayButton.style.display = 'none'; // Hide the button during replay\n    //initializeObjects(); // Reinitialize objects for replay\n    //initializePlayer();  // Reinitialize player for replay\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).totalFrames = 0; // Reset frame counter\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId = requestAnimationFrame((0, $a6e5cb9280750852$export$6ab2b06ec414ff32));\n}\nfunction $dc92eabc72a21f55$export$f3a10d13287ba125() {\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 2) {\n        (0, $c4847625630a65f5$export$8e769ad4338a911e).canshowRequestAI = true;\n        (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n        (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n        (0, $f63559ac802d5fcd$export$dbee4337d98e454a)();\n        (0, $f63559ac802d5fcd$export$941190eab9b1306e)();\n    }\n}\nfunction $dc92eabc72a21f55$export$9be62cd51e5f6c91() {\n    console.log(\"Game finished, redirecting to feedback...\");\n    cancelAnimationFrame((0, $c4847625630a65f5$export$8e769ad4338a911e).animationFrameId);\n    const isLocal = window.location.hostname === \"localhost\";\n    const feedbackPath = isLocal ? \"/feedback.html\" : \"/Human_AI_Interaction/feedback.html\";\n    setTimeout(()=>{\n        window.location.href = feedbackPath;\n    }, 100);\n}\n\n\n\nlet $2b6e161c9edcf319$var$urlParams = (0, $c24a1a98a21ce8e1$export$49b9065228a93aae)();\nif ($2b6e161c9edcf319$var$urlParams.NUM_SELECTIONS !== undefined) (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS = Number($2b6e161c9edcf319$var$urlParams.NUM_SELECTIONS);\nif ($2b6e161c9edcf319$var$urlParams.NUM_OBJECTS !== undefined) (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_OBJECTS = Number($2b6e161c9edcf319$var$urlParams.NUM_OBJECTS);\nif ($2b6e161c9edcf319$var$urlParams.AI_HELP !== undefined) (0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP = Number($2b6e161c9edcf319$var$urlParams.AI_HELP);\n// Initial setup\nfunction $2b6e161c9edcf319$var$initGame(seed) {\n    //\n    if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 0) (0, $634bf96bf244cf3d$export$8e2e30872dc80405).innerHTML = `<p>AI assistance will not be available in this session. </p>`;\n    else if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 1) (0, $634bf96bf244cf3d$export$8e2e30872dc80405).innerHTML = `<p>AI assistance will be available in this session. </p>`;\n    else if ((0, $c4847625630a65f5$export$8e769ad4338a911e).AI_HELP == 2) (0, $634bf96bf244cf3d$export$8e2e30872dc80405).innerHTML = `<p>AI assistance is available on request in this session. </p>`;\n    // Enumerate all possible interception sequences of length NUM_SELECTIONS\n    const indices = Array.from({\n        length: (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_OBJECTS\n    }, (_, i)=>i); // [0, 1, ..., N-1]\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).permutations = (0, $0fe02c20e88f8b06$export$c2e8d36f4b1181be)(indices, (0, $c4847625630a65f5$export$8e769ad4338a911e).NUM_SELECTIONS);\n    (0, $c4847625630a65f5$export$8e769ad4338a911e).randomGenerator = (0, $c24a1a98a21ce8e1$export$5322bfe5932cd9f0)(seed); // Initialize random generator with the provided seed\n    //infocontent.innerHTML = '<p>Measuring display refresh rate...</p>';\n    //infocontent.innerHTML = `<p>Refresh rate detected: ${refreshRate} Hz. Press the button to start the game.</p>`;\n    (0, $634bf96bf244cf3d$export$567384caa8b9afae).innerHTML = `<p>Press the button to start. Please observe the sequence carefully.</p>`;\n    (0, $f63559ac802d5fcd$export$a1c066623ac679d3)();\n    (0, $f63559ac802d5fcd$export$c49e56ba66dbb552)();\n    (0, $634bf96bf244cf3d$export$c19513be8e47ff73).style.display = \"block\";\n//startButton.blur();\n}\n/*\n--------------------------------------------------------------------------------------\n\n    Starting the game\n\n--------------------------------------------------------------------------------------\n*/ // Start initialization on page load with a seed\n$2b6e161c9edcf319$var$initGame((0, $a71a3dd6d29df2e8$export$9ed62adcfac87b3a)); // Replace 12345 with any desired seed\n// Add event listeners to buttons\n(0, $634bf96bf244cf3d$export$c19513be8e47ff73).addEventListener(\"click\", (0, $dc92eabc72a21f55$export$feb4998fe7c4a8d));\n(0, $634bf96bf244cf3d$export$5a59eaaccc02135).addEventListener(\"click\", (0, $dc92eabc72a21f55$export$811b6501893cfef3));\n(0, $634bf96bf244cf3d$export$4f760a2b9bd47f03).addEventListener(\"click\", (0, $dc92eabc72a21f55$export$d1e076093e0872ec));\n(0, $634bf96bf244cf3d$export$3dad6ce5cda7739b).addEventListener(\"click\", (0, $dc92eabc72a21f55$export$f3a10d13287ba125));\n(0, $634bf96bf244cf3d$export$bb41c8132417f715).style.display = \"block\";\n(0, $634bf96bf244cf3d$export$bb41c8132417f715).addEventListener(\"click\", (0, $dc92eabc72a21f55$export$9be62cd51e5f6c91));\n\n\n//# sourceMappingURL=index.b925dbbc.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"28O89\\\",\\\"index.b925dbbc.js\\\",\\\"fF1JW\\\",\\\"player.f624445e.png\\\"]\"));","import {\n  aiinfo,\n  startButton,\n  infocontent,\n  reselectButton,\n  interceptionButton,\n  aiRequest,\n  finishButton,\n} from \"./global/domElements\";\nimport { randSeed } from \"./global/constant\";\nimport { globalState } from \"./global/variable\";\nimport { getUrlParameters, lcg } from \"./utils/utils\";\nimport { generatePermutations } from \"./logic/computation/solutionEvaluator\";\nimport {\n  startTrail,\n  reselectObjects,\n  startInterceptionSequence,\n  revealAISolution,\n  finishGame,\n} from \"./logic/gameEvents\";\nimport { clearCanvas, drawGameCircle } from \"./logic/drawing\";\n\nlet urlParams = getUrlParameters();\nif (urlParams.NUM_SELECTIONS !== undefined) {\n  globalState.NUM_SELECTIONS = Number(urlParams.NUM_SELECTIONS);\n}\nif (urlParams.NUM_OBJECTS !== undefined) {\n  globalState.NUM_OBJECTS = Number(urlParams.NUM_OBJECTS);\n}\nif (urlParams.AI_HELP !== undefined) {\n  globalState.AI_HELP = Number(urlParams.AI_HELP);\n}\n\n// Initial setup\nfunction initGame(seed) {\n  //\n  if (globalState.AI_HELP == 0) {\n    aiinfo.innerHTML = `<p>AI assistance will not be available in this session. </p>`;\n  } else if (globalState.AI_HELP == 1) {\n    aiinfo.innerHTML = `<p>AI assistance will be available in this session. </p>`;\n  } else if (globalState.AI_HELP == 2) {\n    aiinfo.innerHTML = `<p>AI assistance is available on request in this session. </p>`;\n  }\n\n  // Enumerate all possible interception sequences of length NUM_SELECTIONS\n  const indices = Array.from({ length: globalState.NUM_OBJECTS }, (_, i) => i); // [0, 1, ..., N-1]\n  globalState.permutations = generatePermutations(\n    indices,\n    globalState.NUM_SELECTIONS\n  );\n\n  globalState.randomGenerator = lcg(seed); // Initialize random generator with the provided seed\n  //infocontent.innerHTML = '<p>Measuring display refresh rate...</p>';\n  //infocontent.innerHTML = `<p>Refresh rate detected: ${refreshRate} Hz. Press the button to start the game.</p>`;\n  infocontent.innerHTML = `<p>Press the button to start. Please observe the sequence carefully.</p>`;\n  clearCanvas();\n  drawGameCircle();\n  startButton.style.display = \"block\";\n  //startButton.blur();\n}\n\n/*\n--------------------------------------------------------------------------------------\n\n    Starting the game\n\n--------------------------------------------------------------------------------------\n*/\n\n// Start initialization on page load with a seed\ninitGame(randSeed); // Replace 12345 with any desired seed\n\n// Add event listeners to buttons\nstartButton.addEventListener(\"click\", startTrail);\nreselectButton.addEventListener(\"click\", reselectObjects);\ninterceptionButton.addEventListener(\"click\", startInterceptionSequence);\naiRequest.addEventListener(\"click\", revealAISolution);\n\nfinishButton.style.display = \"block\";\nfinishButton.addEventListener(\"click\", finishGame);\n","export const canvas = document.getElementById(\"gameCanvas\");\nexport const ctx = canvas.getContext(\"2d\");\nexport const info = document.getElementById(\"info\");\nexport const aiinfo = document.getElementById(\"aiinfo\");\nexport const infocontent = document.getElementById(\"infocontent\");\nexport const startButton = document.getElementById(\"startButton\");\nexport const replayButton = document.getElementById(\"replayButton\");\nexport const reselectButton = document.getElementById(\"reselectButton\");\nexport const interceptionButton = document.getElementById(\"interceptionButton\");\nexport const finishButton = document.getElementById(\"finishButton\");\nexport const aiRequest = document.getElementById(\"aiRequest\");\n","// Global Constants\nexport const refreshRate = 60; // Assumed refresh rate\nexport const OBSERVATION_FRAMES = Math.round(3000 * (refreshRate / 1000)); // 3000 ms for demo\nexport const INTERCEPTION_FRAMES = Math.round(2000 * (refreshRate / 1000)); // 2000 ms for interception\nexport const speedMultiplier = 1; // Multiplier to adjust speed based on refresh rate\n\nexport const MIN_SPEED = 60;\nexport const MAX_SPEED = 120;\nexport const alphaParam = 1;\nexport const betaParam = 2;\nexport const GAME_RADIUS = 400; // Radius of game circle\nexport const ARROW_FACTOR = 30;\n\nexport const randSeed = 12345; // Seed for random number generator\n\nexport const playerImage = new Image();\nplayerImage.src = new URL(\"../../assets/player.png\", import.meta.url).href;\n","module.exports = new __parcel__URL__(\"player.f624445e.png\").toString();","export const globalState = {\n  NUM_SELECTIONS: 2, // Maximum number of objects to select\n  NUM_OBJECTS: 5, // Number of animated objects\n  AI_HELP: 0,\n\n  curTrial: 0,\n  totalTrials: 1,\n\n  randomGenerator: null, // Global variables for random generator (implements deterministic sequence that can be recreated in other languages)\n  centerX: 0,\n  centerY: 0,\n  totalFrames: 0,\n  animationFrameId: 0,\n  animationStartTime: 0,\n  objects: [], // Array to hold object properties\n  selectedObjects: [], // Tracks selected objects for interception sequence\n  hoverObjectIndex: -1, // Tracks which object is being hovered over\n  speedMultiplier: 1, // Multiplier to adjust speed based on refresh rate\n\n  player: {\n    x0: 0,\n    y0: 0,\n    radius: 15,\n    speed: 0,\n    dX: 0,\n    dY: 0,\n    x: 0,\n    y: 0,\n  },\n\n  permutations: [],\n  allSolutions: null,\n  bestSolution: null,\n  playerSolution: null,\n  interceptionCounter: 0,\n  interceptionFrame: 0,\n\n  canshowRequestAI: false,\n};\n\n/*\nallSolutions = [\n  {\n    sequence: [...],       // 序列（对象的索引列表）\n    totalValue: number,    // 该序列获得的总分数\n    moves: [               // 追踪玩家的拦截行动\n      {\n        success: boolean,       // 该拦截是否成功\n        value: number,          // 如果在圆内，拦截目标的得分\n        timeToIntercept: number,// 需要的帧数\n        dX: number,             // 玩家在 X 方向的移动速度\n        dY: number,             // 玩家在 Y 方向的移动速度\n        interceptPosX: number,  // 拦截点 X 坐标\n        interceptPosY: number,  // 拦截点 Y 坐标\n      },\n      ...\n    ]\n  },\n  ...\n];*/\n","import { globalState } from \"../global/variable\";\n\n// Utility Functions\nexport function getUrlParameters() {\n  const searchParams = new URLSearchParams(window.location.search);\n  const params = {};\n  for (const [key, value] of searchParams.entries()) {\n    params[key] = value;\n  }\n  return params;\n}\n\nexport function lcg(seed) {\n  const a = 1664525;\n  const c = 1013904223;\n  const m = Math.pow(2, 32);\n  let current = seed;\n  return function () {\n    current = (a * current + c) % m;\n    return current / m; // normalize to [0,1]\n  };\n}\n\nexport function sampleBeta(alpha, beta) {\n  function sampleGamma(shape) {\n    // Marsaglia and Tsang method for sampling Gamma(shape, 1)\n    const d = shape - 1 / 3;\n    const c = 1 / Math.sqrt(9 * d);\n    let u, v;\n    do {\n      do {\n        u = globalState.randomGenerator();\n        v = globalState.randomGenerator() * 2 - 1; // Uniformly distributed in (-1, 1)\n      } while (u <= 0);\n      const x = Math.pow(1 + c * v, 3);\n      if (x > 0 && Math.log(u) < 0.5 * v * v + d * (1 - x + Math.log(x))) {\n        return d * x;\n      }\n    } while (true);\n  }\n\n  const x = sampleGamma(alpha);\n  const y = sampleGamma(beta);\n  return x / (x + y); // Transform Gamma samples to Beta\n}\n","import { globalState } from \"../../global/variable\";\nimport { GAME_RADIUS } from \"../../global/constant\";\nimport { attemptIntercept } from \"./interceptionSimulator\";\n\n/*\n--------------------------------------------------------------------------------------\n\n    Generate all possible permutations\n\n--------------------------------------------------------------------------------------\n*/\nexport function generatePermutations(arr, k) {\n  const result = [];\n\n  function helper(currentPermutation) {\n    // If the current permutation is of length k, add it to the result\n    if (currentPermutation.length === k) {\n      result.push([...currentPermutation]);\n      return;\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      if (currentPermutation.includes(arr[i])) continue; // Skip duplicates\n      helper([...currentPermutation, arr[i]]); // Recursive call with new element added\n    }\n  }\n\n  helper([]); // Start recursion with an empty permutation\n  return result;\n}\n\nexport function lookupInterceptionPaths() {\n  for (let i = 0; i < globalState.NUM_SELECTIONS; i++) {\n    console.log(`Object selected ${i} = ${globalState.selectedObjects[i]}`);\n  }\n\n  // Find the index of the matching permutation\n  const matchingIndex = findMatchingPermutationIndex(\n    globalState.permutations,\n    globalState.selectedObjects\n  );\n  let playerSolution;\n\n  console.log(`Matching index: ${matchingIndex}`);\n  if (matchingIndex !== -1) {\n    console.log(\n      `Matching permutation:`,\n      globalState.permutations[matchingIndex]\n    );\n    playerSolution = globalState.allSolutions[matchingIndex];\n  } else {\n    console.log(`No matching permutation found.`);\n  }\n\n  return playerSolution;\n}\n\nfunction findMatchingPermutationIndex(permutations, selectedObjects) {\n  return permutations.findIndex(\n    (permutation) =>\n      permutation.length === selectedObjects.length &&\n      permutation.every((value, index) => value === selectedObjects[index])\n  );\n}\n\n/*\n--------------------------------------------------------------------------------------\n\n    Computing the Optimal Interception Paths\n\n--------------------------------------------------------------------------------------\n*/\nexport function enumerateAllSolutions() {\n  const numSequences = globalState.permutations.length;\n  let allSolutions = [];\n  let bestSolutionIndex = -1;\n  let maxValue = -Infinity;\n\n  for (let i = 0; i < numSequences; i++) {\n    let sequence = globalState.permutations[i];\n\n    // Clone objects and player to simulate movement\n    let copyObjects = structuredClone(globalState.objects);\n    let copyPlayer = structuredClone(globalState.player);\n\n    let totalValue = 0;\n    let moves = [];\n    let isInProgress = true; // Interception is still active\n\n    for (let j = 0; j < globalState.NUM_SELECTIONS; j++) {\n      const id = sequence[j];\n      const objectNow = copyObjects[id];\n\n      let [\n        success,\n        timeToIntercept,\n        interceptPosX,\n        interceptPosY,\n        finalDistanceAtCircle,\n      ] = attemptIntercept(\n        isInProgress,\n        copyPlayer.x,\n        copyPlayer.y,\n        copyPlayer.speed,\n        objectNow.x,\n        objectNow.y,\n        objectNow.dX,\n        objectNow.dY\n      );\n\n      // Move player and objects if still intercepting\n      if (isInProgress) {\n        let move = processMove(\n          success,\n          timeToIntercept,\n          copyPlayer,\n          interceptPosX,\n          interceptPosY,\n          copyObjects\n        );\n        moves.push(move);\n      }\n\n      // Compute score for this object\n      let valueNow = computeObjectValue(\n        objectNow,\n        success,\n        finalDistanceAtCircle,\n        j,\n        isInProgress\n      );\n\n      totalValue += valueNow;\n\n      // If interception fails, mark as not in progress\n      if (!success && isInProgress) isInProgress = false;\n    }\n\n    let solution = { sequence, totalValue, moves };\n    allSolutions.push(solution);\n\n    // Update best solution\n    if (totalValue > maxValue) {\n      bestSolutionIndex = i;\n      maxValue = totalValue;\n    }\n  }\n\n  // Normalize scores based on the best solution\n  normalizeSolutionValues(allSolutions, maxValue);\n\n  // Logging best solution\n  logSolutions(allSolutions, bestSolutionIndex, maxValue);\n\n  return [allSolutions, allSolutions[bestSolutionIndex]];\n}\n\n/**\n * Processes a move when interception is successful.\n */\nfunction processMove(\n  success,\n  timeToIntercept,\n  player,\n  interceptPosX,\n  interceptPosY,\n  objects\n) {\n  let move = { success };\n\n  // Round the time to intercept\n  timeToIntercept = Math.round(timeToIntercept);\n  move.timeToIntercept = timeToIntercept;\n\n  // Compute movement step size\n  move.dX = (interceptPosX - player.x) / timeToIntercept;\n  move.dY = (interceptPosY - player.y) / timeToIntercept;\n\n  // Move player\n  player.x += timeToIntercept * move.dX;\n  player.y += timeToIntercept * move.dY;\n\n  move.interceptPosX = player.x;\n  move.interceptPosY = player.y;\n\n  // Move all objects\n  for (let obj of objects) {\n    obj.x += timeToIntercept * obj.dX;\n    obj.y += timeToIntercept * obj.dY;\n  }\n\n  return move;\n}\n\n/**\n * Computes the value of the object based on whether interception was successful.\n */\nfunction computeObjectValue(\n  object,\n  success,\n  finalDistanceAtCircle,\n  selectionIndex,\n  isInProgress\n) {\n  if (success) return object.value;\n\n  // Apply weight-based scoring for missed interceptions\n  let weight = 0.5 * (globalState.NUM_SELECTIONS - selectionIndex);\n  let scaledValue =\n    ((GAME_RADIUS * 2 - finalDistanceAtCircle) / (GAME_RADIUS * 2)) *\n    object.value *\n    weight;\n\n  return isInProgress ? scaledValue : 0; // If no longer in progress, weight is applied\n}\n\n/**\n * Normalizes all solution values relative to the maximum.\n */\nfunction normalizeSolutionValues(solutions, maxValue) {\n  for (let sol of solutions) {\n    sol.totalValueProp = sol.totalValue / maxValue;\n  }\n}\n\n/**\n * Logs all solutions and the best one.\n */\nfunction logSolutions(solutions, bestSolutionIndex, maxValue) {\n  console.log(`\\n🔹 All Solutions Summary:`);\n\n  solutions.forEach((sol, i) => {\n    console.log(\n      `${i}: Sequence ${sol.sequence}, Score: ${sol.totalValue.toFixed(2)}`\n    );\n    sol.moves.forEach((move, index) => {\n      console.log(`   ↳ Move ${index}: success=${move.success}`);\n    });\n  });\n\n  console.log(\n    `\\n🏆 Best solution = ${\n      globalState.permutations[bestSolutionIndex]\n    }, maxValue = ${maxValue.toFixed(2)}`\n  );\n}\n","import { globalState } from \"../../global/variable\";\nimport { GAME_RADIUS } from \"../../global/constant\";\n\nexport function attemptIntercept(\n  isInProgress,\n  playerPosX,\n  playerPosY,\n  playerSpeed,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  let success = false;\n  let travelTime = Infinity;\n  let interceptPosX = NaN,\n    interceptPosY = NaN;\n  // let totalDistanceTraveled = Infinity;\n  let finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY;\n\n  // If interception is already over, compute final distance at the circle boundary\n  if (!isInProgress) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Compute interception time using quadratic formula\n  let [hasSolution, t1, t2] = solveQuadraticEquation(\n    objectVelX ** 2 + objectVelY ** 2 - playerSpeed ** 2,\n    2 *\n      ((objectPosX - playerPosX) * objectVelX +\n        (objectPosY - playerPosY) * objectVelY),\n    (objectPosX - playerPosX) ** 2 + (objectPosY - playerPosY) ** 2\n  );\n\n  // If no valid interception time exists, handle failure case\n  if (!hasSolution) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Select the smallest valid interception time\n  travelTime = t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n\n  if (travelTime === Infinity) {\n    return computeNoInterceptCase(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n  }\n\n  // Compute interception position\n  interceptPosX = objectPosX + travelTime * objectVelX;\n  interceptPosY = objectPosY + travelTime * objectVelY;\n  // totalDistanceTraveled = travelTime * playerSpeed;\n\n  // Compute final distance at the circle boundary\n  [finalDistanceAtCircle, timeToCircle, circleBoundaryX, circleBoundaryY] =\n    computeFinalDistanceAtCircleBoundary(\n      playerPosX,\n      playerPosY,\n      (interceptPosX - playerPosX) / Math.round(travelTime),\n      (interceptPosY - playerPosY) / Math.round(travelTime),\n      objectPosX,\n      objectPosY,\n      objectVelX,\n      objectVelY\n    );\n\n  // Check if interception is within the circle\n  success = isWithinCircle(interceptPosX, interceptPosY);\n\n  // Adjust return values based on interception success\n  if (!success) {\n    interceptPosX = circleBoundaryX;\n    interceptPosY = circleBoundaryY;\n    travelTime = timeToCircle;\n  } else {\n    finalDistanceAtCircle = 0;\n  }\n\n  return [\n    success,\n    travelTime,\n    interceptPosX,\n    interceptPosY,\n    finalDistanceAtCircle,\n  ];\n}\n\n/**\n * Handles the case where interception is impossible.\n */\nfunction computeNoInterceptCase(\n  playerPosX,\n  playerPosY,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  return computeFinalDistanceAtCircleBoundary(\n    playerPosX,\n    playerPosY,\n    0,\n    0,\n    objectPosX,\n    objectPosY,\n    objectVelX,\n    objectVelY\n  );\n}\n\n/**\n * Computes whether a point is inside the circle.\n */\nfunction isWithinCircle(x, y) {\n  return (\n    Math.sqrt(\n      (x - globalState.centerX) ** 2 + (y - globalState.centerY) ** 2\n    ) <= GAME_RADIUS\n  );\n}\n\n/**\n * Computes player's movement to the circle boundary and final distance to object.\n */\nfunction computeFinalDistanceAtCircleBoundary(\n  playerPosX,\n  playerPosY,\n  playerVelX,\n  playerVelY,\n  objectPosX,\n  objectPosY,\n  objectVelX,\n  objectVelY\n) {\n  if (Math.abs(playerVelX) < 1e-6 && Math.abs(playerVelY) < 1e-6) {\n    [playerVelX, playerVelY] = computeDirectionVector(\n      playerPosX,\n      playerPosY,\n      objectPosX,\n      objectPosY\n    );\n  }\n\n  let [timeToCircle, circleBoundaryX, circleBoundaryY] =\n    computePlayerDistanceToCircleBoundary(\n      playerPosX,\n      playerPosY,\n      playerVelX,\n      playerVelY\n    );\n\n  let objectFutureX = objectPosX + timeToCircle * objectVelX;\n  let objectFutureY = objectPosY + timeToCircle * objectVelY;\n\n  let finalDistanceAtCircle = Math.sqrt(\n    (objectFutureX - circleBoundaryX) ** 2 +\n      (objectFutureY - circleBoundaryY) ** 2\n  );\n\n  return [\n    finalDistanceAtCircle,\n    timeToCircle,\n    circleBoundaryX,\n    circleBoundaryY,\n  ];\n}\n\n/**\n * Computes a normalized direction vector from (startX, startY) to (targetX, targetY).\n */\nfunction computeDirectionVector(startX, startY, targetX, targetY) {\n  let dirX = targetX - startX;\n  let dirY = targetY - startY;\n  let magnitude = Math.sqrt(dirX ** 2 + dirY ** 2);\n  return magnitude > 1e-6 ? [dirX / magnitude, dirY / magnitude] : [0, 0];\n}\n\n/**\n * Computes the player's distance to the circle boundary using quadratic intersection.\n */\nfunction computePlayerDistanceToCircleBoundary(\n  playerPosX,\n  playerPosY,\n  playerVelX,\n  playerVelY\n) {\n  let centerX = globalState.centerX;\n  let centerY = globalState.centerY;\n  let playerDistToCenter = Math.sqrt(\n    (playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2\n  );\n\n  if (Math.abs(playerDistToCenter - GAME_RADIUS) < 1e-6) {\n    return [0, playerPosX, playerPosY];\n  }\n\n  let [hasSolution, t1, t2] = solveQuadraticEquation(\n    playerVelX ** 2 + playerVelY ** 2,\n    2 *\n      ((playerPosX - centerX) * playerVelX +\n        (playerPosY - centerY) * playerVelY),\n    (playerPosX - centerX) ** 2 + (playerPosY - centerY) ** 2 - GAME_RADIUS ** 2\n  );\n\n  if (!hasSolution) {\n    console.warn(\"🚨 Player's movement does not reach the circle boundary.\");\n    return [Infinity, NaN, NaN];\n  }\n\n  let timeToCircle =\n    t1 >= 0 && (t1 < t2 || t2 < 0) ? t1 : t2 >= 0 ? t2 : Infinity;\n  if (timeToCircle === Infinity) {\n    console.warn(\"🚨 Player is moving away from the circle.\");\n    return [Infinity, NaN, NaN];\n  }\n\n  return [\n    timeToCircle,\n    playerPosX + timeToCircle * playerVelX,\n    playerPosY + timeToCircle * playerVelY,\n  ];\n}\n\n/**\n * Solves a quadratic equation Ax^2 + Bx + C = 0 and returns [hasSolution, t1, t2].\n */\nfunction solveQuadraticEquation(A, B, C) {\n  let discriminant = B ** 2 - 4 * A * C;\n  if (discriminant < 0) return [false, NaN, NaN];\n  let sqrtD = Math.sqrt(discriminant);\n  return [true, (-B + sqrtD) / (2 * A), (-B - sqrtD) / (2 * A)];\n}\n","import { globalState } from \"../global/variable.js\";\nimport {\n  canvas,\n  startButton,\n  replayButton,\n  interceptionButton,\n  reselectButton,\n  aiRequest,\n  infocontent,\n} from \"../global/domElements.js\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing.js\";\nimport { animateObjects, animateInterception } from \"./animation.js\";\nimport { initializeObjects, initializePlayer } from \"./initialize.js\";\nimport { handleObjectSelection, handleMouseHover } from \"./mouseEvents.js\";\nimport {\n  lookupInterceptionPaths,\n  enumerateAllSolutions,\n} from \"./computation/solutionEvaluator.js\";\n\nexport function startTrail() {\n  globalState.curTrial++;\n  console.log(`------curTrail: ${globalState.curTrial}---------`);\n\n  // Hide the start round button\n  startButton.style.display = \"none\";\n  startButton.blur();\n  aiRequest.disabled = true;\n\n  // Update the info div\n  infocontent.innerHTML = \"<p>Example sequence in progress...</p>\";\n  globalState.canshowRequestAI = false;\n\n  // Initialize the objects and the player positions, direction and speed\n  initializeObjects(globalState.curTrial === 1);\n  initializePlayer();\n\n  // Reset frame counter for the demo\n  globalState.totalFrames = 0;\n\n  // Start the animation\n  globalState.animationFrameId = requestAnimationFrame(animateObjects);\n}\n\nexport function reselectObjects() {\n  for (let index of globalState.selectedObjects) {\n    let object = globalState.objects.find((obj) => obj.index === index);\n    if (object) {\n      object.isSelected = false;\n      delete object.selectionIndex;\n    }\n  }\n\n  globalState.hoverObjectIndex = -1;\n  globalState.selectedObjects = [];\n\n  canvas.addEventListener(\"click\", handleObjectSelection);\n  canvas.addEventListener(\"mousemove\", handleMouseHover);\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n\n  interceptionButton.style.display = \"none\";\n  reselectButton.disabled = true;\n  replayButton.disabled = false;\n}\n\nexport function startInterceptionSequence() {\n  reselectButton.style.display = \"none\";\n  interceptionButton.style.display = \"none\"; // Hide the interception button\n  replayButton.style.display = \"none\";\n  aiRequest.style.display = \"none\";\n  //aiRequest.disabled = true; // Disables the button\n\n  globalState.playerSolution = lookupInterceptionPaths();\n  globalState.interceptionCounter = 0; // the index of the interception path\n  globalState.interceptionFrame = 0;\n\n  infocontent.innerHTML = \"<p>Interception sequence in progress...</p>\";\n  globalState.canshowRequestAI = false;\n\n  // Start the interception animation\n  globalState.animationFrameId = requestAnimationFrame(animateInterception);\n}\n\nexport function endDemo() {\n  cancelAnimationFrame(globalState.animationFrameId);\n  infocontent.innerHTML = `<p><center>OR</center></p><p>When ready, click on ${globalState.NUM_SELECTIONS} objects to determine the order of interception. The goal is to maximize the point value across successfully intercepted objects</p>`;\n  if (globalState.AI_HELP == 1) {\n    infocontent.innerHTML += `<p>The suggested AI solution is shown in blue </p>`;\n  }\n  canvas.addEventListener(\"click\", handleObjectSelection);\n  canvas.addEventListener(\"mousemove\", handleMouseHover);\n\n  // Show the replay button\n  replayButton.disabled = false; // enables the button\n  replayButton.style.display = \"block\";\n  replayButton.addEventListener(\"click\", replayDemo);\n\n  [globalState.allSolutions, globalState.bestSolution] =\n    enumerateAllSolutions();\n\n  if (globalState.AI_HELP == 2) {\n    aiRequest.style.display = \"block\";\n    aiRequest.disabled = false;\n  }\n\n  if (globalState.AI_HELP == 1) {\n    globalState.canshowRequestAI = true;\n  }\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n}\n\nexport function replayDemo() {\n  globalState.canshowRequestAI = false;\n  replayButton.disabled = true; // Disables the button\n  //replayButton.style.display = 'none'; // Hide the button during replay\n  //initializeObjects(); // Reinitialize objects for replay\n  //initializePlayer();  // Reinitialize player for replay\n  globalState.totalFrames = 0; // Reset frame counter\n  globalState.animationFrameId = requestAnimationFrame(animateObjects);\n}\n\nexport function revealAISolution() {\n  if (globalState.AI_HELP == 2) {\n    globalState.canshowRequestAI = true;\n\n    clearCanvas();\n    drawGameCircle();\n    drawObjects();\n    drawPlayer();\n  }\n}\n\nexport function finishGame() {\n  console.log(\"Game finished, redirecting to feedback...\");\n  cancelAnimationFrame(globalState.animationFrameId);\n\n  const isLocal = window.location.hostname === \"localhost\";\n  const feedbackPath = isLocal\n    ? \"/feedback.html\"\n    : \"/Human_AI_Interaction/feedback.html\";\n  setTimeout(() => {\n    window.location.href = feedbackPath;\n  }, 100);\n}\n","import { ARROW_FACTOR, GAME_RADIUS, playerImage } from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { canvas, ctx } from \"../global/domElements.js\";\n\n// Function to draw arrows indicating direction and speed\nexport function drawArrows() {\n  globalState.objects.forEach((object) => {\n    if (!object.isIntercepted) {\n      const arrowLength =\n        Math.sqrt(object.dX ** 2 + object.dY ** 2) * ARROW_FACTOR; // Scale speed for arrow length\n\n      const angle = Math.atan2(object.dY, object.dX);\n\n      const startX = object.x;\n      const startY = object.y;\n      const endX = startX + arrowLength * Math.cos(angle);\n      const endY = startY + arrowLength * Math.sin(angle);\n\n      // Draw the main arrow line\n      ctx.beginPath();\n      ctx.moveTo(startX, startY);\n      ctx.lineTo(endX, endY);\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"gray\";\n      ctx.stroke();\n\n      // Draw the arrowhead\n      const arrowheadLength = 12;\n      const arrowheadAngle = Math.PI / 6;\n\n      const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n      const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n\n      const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n      const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n\n      ctx.beginPath();\n      ctx.moveTo(endX, endY);\n      ctx.lineTo(leftX, leftY);\n      ctx.lineTo(rightX, rightY);\n      ctx.closePath();\n      ctx.fillStyle = \"gray\";\n      ctx.fill();\n    }\n  });\n}\n\nexport function drawPlayerArrow() {\n  // Draw the player arrow\n  const arrowLength =\n    Math.sqrt(globalState.player.dX ** 2 + globalState.player.dY ** 2) *\n    ARROW_FACTOR; // Scale speed for arrow length\n\n  const angle = Math.atan2(globalState.player.dY, globalState.player.dX);\n\n  const startX = globalState.player.x;\n  const startY = globalState.player.y;\n  const endX = startX + arrowLength * Math.cos(angle);\n  const endY = startY + arrowLength * Math.sin(angle);\n\n  // Draw the main arrow line\n  ctx.beginPath();\n  ctx.moveTo(startX, startY);\n  ctx.lineTo(endX, endY);\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = \"gray\";\n  ctx.stroke();\n\n  // Draw the arrowhead\n  const arrowheadLength = 12;\n  const arrowheadAngle = Math.PI / 6;\n\n  const leftX = endX - arrowheadLength * Math.cos(angle - arrowheadAngle);\n  const leftY = endY - arrowheadLength * Math.sin(angle - arrowheadAngle);\n\n  const rightX = endX - arrowheadLength * Math.cos(angle + arrowheadAngle);\n  const rightY = endY - arrowheadLength * Math.sin(angle + arrowheadAngle);\n\n  ctx.beginPath();\n  ctx.moveTo(endX, endY);\n  ctx.lineTo(leftX, leftY);\n  ctx.lineTo(rightX, rightY);\n  ctx.closePath();\n  ctx.fillStyle = \"gray\";\n  ctx.fill();\n}\n\n// Function to draw all animated objects\nexport function drawObjects() {\n  globalState.objects.forEach((object, index) => {\n    if (!object.isIntercepted) {\n      // Highlight object if hovered\n      if (index === globalState.hoverObjectIndex) {\n        ctx.beginPath();\n        ctx.arc(object.x, object.y, object.radius + 5, 0, Math.PI * 2);\n        ctx.fillStyle = \"rgba(255, 0, 0, 0.3)\"; // Glow effect\n        ctx.fill();\n      }\n\n      // Draw the object's filled area\n      ctx.beginPath();\n      ctx.arc(object.x, object.y, object.radius * object.value, 0, Math.PI * 2);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n\n      // Set text alignment and baseline for centering\n      ctx.textAlign = \"center\"; // Aligns text horizontally to the center\n      ctx.textBaseline = \"middle\"; // Aligns text vertically to the center\n      ctx.fillStyle = \"rgb(0, 0, 0)\";\n      let fontSize = 20;\n      ctx.font = `${fontSize}px Arial`;\n      ctx.fillText(index, object.x, object.y);\n\n      // Draw the object's border\n      ctx.beginPath();\n      ctx.arc(object.x, object.y, object.radius, 0, Math.PI * 2);\n      ctx.lineWidth = 3;\n      //ctx.fillStyle = 'rgba(14, 13, 13, 0.3)'; // Glow effect\n      ctx.strokeStyle = \"red\";\n      ctx.stroke();\n      //ctx.fill();\n\n      // Draw selection number if selected\n      if (object.isSelected) {\n        const selectionIndex = object.selectionIndex;\n        ctx.fillStyle = \"black\";\n        ctx.font = \"24px Arial\";\n        ctx.fillText(\n          selectionIndex + 1,\n          object.x + object.radius + 14,\n          object.y + 8\n        );\n      }\n\n      if (globalState.canshowRequestAI) {\n        let AISelectionIndex = globalState.bestSolution.sequence.indexOf(index);\n        if (AISelectionIndex !== -1) {\n          ctx.fillStyle = \"blue\";\n          ctx.font = \"24px Arial\";\n          ctx.fillText(\n            AISelectionIndex + 1,\n            object.x - object.radius - 20,\n            object.y + 8\n          );\n        }\n      }\n\n      // For debugging\n      if (!true) {\n        ctx.fillStyle = \"red\";\n        ctx.font = \"24px Arial\";\n        ctx.fillText(index, object.x + object.radius + 10, object.y + 14);\n      }\n    }\n  });\n\n  // Draw arrows for all objects\n  drawArrows();\n}\n\nexport function drawPlayer() {\n  // Draw the player image\n  if (playerImage.complete && playerImage.naturalWidth !== 0) {\n    // Ensure the image is loaded before drawing\n    const imageWidth = 60; // Adjust the size of the image\n    const imageHeight = 60;\n    ctx.drawImage(\n      playerImage,\n      globalState.player.x - imageWidth / 2,\n      globalState.player.y - imageHeight / 2,\n      imageWidth,\n      imageHeight\n    );\n  } else {\n    // Fallback in case the image hasn't loaded yet\n    ctx.beginPath();\n    ctx.arc(\n      globalState.player.x,\n      globalState.player.y,\n      globalState.player.radius,\n      0,\n      Math.PI * 2\n    );\n    ctx.fillStyle = \"blue\";\n    ctx.fill();\n  }\n\n  // Draw arrows for player\n  //drawPlayerArrow();\n\n  // Visualize interception position (for debugging)\n  if (!true) {\n    if (globalState.playerSolution) {\n      let currentMove =\n        globalState.playerSolution.moves[globalState.interceptionCounter]; // object that contains all information for intercepting the current object\n      ctx.beginPath();\n      ctx.arc(\n        currentMove.interceptPosX,\n        currentMove.interceptPosY,\n        15,\n        0,\n        Math.PI * 2\n      );\n      ctx.fillStyle = \"blue\";\n      ctx.fill();\n    }\n  }\n}\n\n// Function to draw the main circle\nexport function drawGameCircle() {\n  globalState.centerX = canvas.width / 2;\n  globalState.centerY = canvas.height / 2;\n\n  ctx.save(); // Save the current canvas state\n  ctx.beginPath();\n  ctx.arc(\n    globalState.centerX,\n    globalState.centerY,\n    GAME_RADIUS,\n    0,\n    Math.PI * 2\n  ); // Define the clipping path\n  ctx.clip(); // Apply clipping to restrict drawings to this area\n\n  // Draw the main circle\n  ctx.beginPath();\n  ctx.arc(\n    globalState.centerX,\n    globalState.centerY,\n    GAME_RADIUS,\n    0,\n    Math.PI * 2\n  );\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n  ctx.lineWidth = 5;\n  ctx.strokeStyle = \"black\";\n  ctx.stroke();\n}\n\n// Function to clear the canvas\nexport function clearCanvas() {\n  ctx.restore(); // Restore to the original canvas state\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n","import { OBSERVATION_FRAMES, GAME_RADIUS } from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { startButton, infocontent, finishButton } from \"../global/domElements.js\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing.js\";\nimport { endDemo } from \"./gameEvents.js\";\n\nexport function animateObjects() {\n  // Update positions and redraw\n  updateObjectPositions(globalState.totalFrames);\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n\n  // Increment frame counter\n  globalState.totalFrames++;\n\n  // Continue animation or end demo\n  if (globalState.totalFrames < OBSERVATION_FRAMES) {\n    globalState.animationFrameId = requestAnimationFrame(animateObjects);\n  } else {\n    endDemo();\n  }\n}\n\nexport function animateInterception() {\n  // Update positions and redraw\n  updateObjectPositions(globalState.totalFrames);\n  let [status, success] = updatePlayerPosition();\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer(); // temp\n\n  // Increment frame counter\n  globalState.totalFrames++;\n\n  // Is the player still within the game area?\n  let isInCircle =\n    Math.sqrt(\n      (globalState.player.x - globalState.centerX) ** 2 +\n        (globalState.player.y - globalState.centerY) ** 2\n    ) <= GAME_RADIUS;\n\n  // Continue animation or end interception sequence\n  if (isInCircle && status == \"in progress\") {\n    globalState.animationFrameId = requestAnimationFrame(animateInterception);\n  } else {\n    finishTrial(isInCircle, success);\n  }\n}\n\nfunction finishTrial(isInCircle, success) {\n  console.log(`Finished interception sequence`);\n  cancelAnimationFrame(globalState.animationFrameId);\n  if (globalState.curTrial === globalState.totalTrials) {\n    finishButton.style.display = \"block\";\n  } else {\n    startButton.style.display = \"block\";\n  }\n    \n  let valNow = Math.round(globalState.playerSolution.totalValueProp * 100);\n  if (!isInCircle || !success) {\n    infocontent.innerHTML = `<p>Reached outside of the circle</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n  } else {\n    infocontent.innerHTML = `<p>Finished interception sequence</p><p>Point value achieved: ${valNow}% of the best AI solution.</p>`;\n  }\n}\n\n// Function to update object positions\nfunction updateObjectPositions(frame) {\n  globalState.objects.forEach((object) => {\n    // Update object's position based on its speed\n    object.x = object.x0 + frame * object.dX;\n    object.y = object.y0 + frame * object.dY;\n  });\n}\n\nfunction updatePlayerPosition() {\n  let currentMove =\n    globalState.playerSolution.moves[globalState.interceptionCounter]; // object that contains all information for intercepting the current object\n  let currentObject =\n    globalState.playerSolution.sequence[globalState.interceptionCounter];\n  globalState.interceptionFrame += 1;\n\n  let status = \"in progress\";\n  let success = false;\n  if (globalState.interceptionFrame == currentMove.timeToIntercept) {\n    success = currentMove.success;\n    globalState.objects[currentObject].isIntercepted = currentMove.success;\n    globalState.interceptionFrame = 0; // reset counter for the next object\n    globalState.interceptionCounter += 1;\n\n    if (\n      globalState.interceptionCounter < globalState.playerSolution.moves.length\n    ) {\n      currentMove =\n        globalState.playerSolution.moves[globalState.interceptionCounter];\n    } else {\n      console.log(\"Finished with interception sequence\");\n      status = \"finished\";\n      return [status, success];\n    }\n  }\n\n  globalState.player.x += currentMove.dX;\n  globalState.player.y += currentMove.dY;\n\n  return [status, success];\n}\n","import {\n  MAX_SPEED,\n  MIN_SPEED,\n  GAME_RADIUS,\n  refreshRate,\n  speedMultiplier,\n  OBSERVATION_FRAMES,\n  alphaParam,\n  betaParam,\n} from \"../global/constant.js\";\nimport { globalState } from \"../global/variable.js\";\nimport { sampleBeta } from \"../utils/utils.js\";\n\nexport function initializeObjects(isEasyMode) {\n  globalState.objects = [];\n  globalState.selectedObjects = []; // Reset selections\n  globalState.hoverObjectIndex = -1; // Reset hover index\n\n  const numObjects = globalState.NUM_OBJECTS;\n  const specialSpeed =\n    ((MAX_SPEED - MIN_SPEED) * speedMultiplier) / refreshRate;\n  const offsetX = GAME_RADIUS - GAME_RADIUS / 5; // Position special objects near the edge\n  const specialFinalRadius = Math.abs(\n    globalState.centerX - (offsetX - specialSpeed * OBSERVATION_FRAMES)\n  );\n\n  // 1️⃣ **Create two special objects (Left & Right, moving toward the center)**\n  if (isEasyMode) {\n    createSpecialObjects(specialSpeed, offsetX);\n  }\n\n  // 2️⃣ **Create remaining random objects (far from the center, low value)**\n  for (let i = isEasyMode ? 2 : 0; i < numObjects; i++) {\n    let newObject = generateRandomObject(isEasyMode, specialFinalRadius);\n    globalState.objects.push(newObject);\n  }\n}\n\n/**\n * Creates two special objects that move toward the center.\n */\nfunction createSpecialObjects(specialSpeed, offsetX) {\n  const specialObjects = [\n    {\n      x0: globalState.centerX - offsetX,\n      dX: specialSpeed,\n      y0: globalState.centerY,\n      dY: 0,\n    },\n    {\n      x0: globalState.centerX + offsetX,\n      dX: -specialSpeed,\n      y0: globalState.centerY,\n      dY: 0,\n    },\n  ];\n\n  for (let i = 0; i < specialObjects.length; i++) {\n    const { x0, y0, dX, dY } = specialObjects[i];\n\n    globalState.objects.push({\n      x0,\n      y0,\n      radius: 15,\n      speed: specialSpeed,\n      dX,\n      dY,\n      value: 0.7, // High priority objects\n      isSelected: false,\n      selectionIndex: NaN,\n      isIntercepted: false,\n      index: i,\n    });\n  }\n}\n\n/**\n * Generates a random object positioned far from the center.\n */\nfunction generateRandomObject(isEasyMode, specialFinalRadius) {\n  let x0, y0, dx, dy, speed;\n  let isValid = false;\n\n  do {\n    let randomDirection = globalState.randomGenerator() * Math.PI * 2;\n    let randomSpeed =\n      globalState.randomGenerator() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED;\n    let randomRadius =\n      globalState.randomGenerator() * (GAME_RADIUS * 0.6) + GAME_RADIUS / 3;\n    let randomStartAngle = globalState.randomGenerator() * Math.PI * 2;\n    speed = (randomSpeed * speedMultiplier) / refreshRate;\n\n    x0 = globalState.centerX + Math.cos(randomStartAngle) * randomRadius;\n    y0 = globalState.centerY + Math.sin(randomStartAngle) * randomRadius;\n\n    dx = speed * Math.cos(randomDirection);\n    dy = speed * Math.sin(randomDirection);\n\n    // Predict final position to ensure it stays inside bounds\n    const finalx = x0 + dx * OBSERVATION_FRAMES;\n    const finaly = y0 + dy * OBSERVATION_FRAMES;\n    const finalRadius = Math.sqrt(\n      (finalx - globalState.centerX) ** 2 + (finaly - globalState.centerY) ** 2\n    );\n\n    isValid = isEasyMode\n      ? finalRadius > specialFinalRadius + 50 && finalRadius < GAME_RADIUS - 50\n      : finalRadius > 100 && finalRadius < GAME_RADIUS - 50;\n  } while (!isValid);\n\n  let value = sampleBeta(alphaParam, betaParam); // Random value between 0 and 1\n  if (isEasyMode) value *= 0.5; // Ensure value < 0.5 for easy mode\n\n  return {\n    x0,\n    y0,\n    radius: 15,\n    speed,\n    dX: dx,\n    dY: dy,\n    value,\n    isSelected: false,\n    selectionIndex: NaN,\n    isIntercepted: false,\n    index: globalState.objects.length, // Assign index dynamically\n  };\n}\n\n// Function to initialize the player\nexport function initializePlayer() {\n  let randomDirection;\n  let randomSpeed, randomRadius, randomStartAngle;\n  let x0, y0, dx, dy, speed, finalx, finaly;\n  x0 = globalState.centerX;\n  y0 = globalState.centerY;\n  //randomSpeed = randomGenerator() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED; // Speed between 50 and 100\n  randomSpeed = MAX_SPEED;\n  speed = (randomSpeed * speedMultiplier) / refreshRate;\n  dx = 0;\n  dy = 0;\n  globalState.player = {\n    x0: x0,\n    y0: y0,\n    radius: 15, // Radius of each animated object\n    speed: speed,\n    dX: dx,\n    dY: dy,\n    x: x0,\n    y: y0,\n  };\n}\n","import { globalState } from \"../global/variable\";\nimport {\n  clearCanvas,\n  drawGameCircle,\n  drawObjects,\n  drawPlayer,\n} from \"./drawing\";\nimport {\n  canvas,\n  replayButton,\n  reselectButton,\n  interceptionButton,\n} from \"../global/domElements\";\n\n// Function to handle mouse hover\nexport function handleMouseHover(event) {\n  const rect = canvas.getBoundingClientRect();\n  const mouseX = event.clientX - rect.left;\n  const mouseY = event.clientY - rect.top;\n\n  globalState.hoverObjectIndex = globalState.objects.findIndex(\n    (object) =>\n      Math.hypot(mouseX - object.x, mouseY - object.y) <= object.radius\n  );\n\n  clearCanvas();\n  drawGameCircle();\n  drawObjects();\n  drawPlayer();\n}\n\n// Function to handle object selection\nexport function handleObjectSelection(event) {\n  const rect = canvas.getBoundingClientRect();\n  const mouseX = event.clientX - rect.left;\n  const mouseY = event.clientY - rect.top;\n\n  for (let object of globalState.objects) {\n    const distance = Math.hypot(mouseX - object.x, mouseY - object.y);\n    if (\n      distance <= object.radius &&\n      !object.isSelected &&\n      globalState.selectedObjects.length < globalState.NUM_SELECTIONS\n    ) {\n      object.isSelected = true;\n      object.selectionIndex = globalState.selectedObjects.length;\n      globalState.selectedObjects.push(object.index); // store the index of the object\n      drawObjects();\n\n      replayButton.disabled = true; // Disables the button\n\n      reselectButton.style.display = \"block\";\n      reselectButton.disabled = false;\n\n      if (globalState.selectedObjects.length === globalState.NUM_SELECTIONS) {\n        canvas.removeEventListener(\"click\", handleObjectSelection);\n        canvas.removeEventListener(\"mousemove\", handleMouseHover);\n        interceptionButton.style.display = \"block\";\n      }\n      break;\n    }\n  }\n}\n"],"names":["current","seed","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$634bf96bf244cf3d$export$67ea982130081db","document","getElementById","$634bf96bf244cf3d$export$39f92e86d1722f3a","getContext","$634bf96bf244cf3d$export$8e2e30872dc80405","$634bf96bf244cf3d$export$567384caa8b9afae","$634bf96bf244cf3d$export$c19513be8e47ff73","$634bf96bf244cf3d$export$33dc6586297841e","$634bf96bf244cf3d$export$5a59eaaccc02135","$634bf96bf244cf3d$export$4f760a2b9bd47f03","$634bf96bf244cf3d$export$bb41c8132417f715","$634bf96bf244cf3d$export$3dad6ce5cda7739b","$a71a3dd6d29df2e8$export$14a94e727fb829ce","Math","round","$a71a3dd6d29df2e8$export$6cc6872c9c867038","Image","$4be721e055781202$exports","src","href","$c4847625630a65f5$export$8e769ad4338a911e","NUM_SELECTIONS","NUM_OBJECTS","AI_HELP","curTrial","totalTrials","randomGenerator","centerX","centerY","totalFrames","animationFrameId","objects","selectedObjects","hoverObjectIndex","player","x0","y0","radius","speed","dX","dY","x","y","permutations","allSolutions","bestSolution","playerSolution","interceptionCounter","interceptionFrame","canshowRequestAI","$8ad3900a5eaa809f$var$computeFinalDistanceAtCircleBoundary","playerPosX","playerPosY","playerVelX","playerVelY","objectPosX","objectPosY","objectVelX","objectVelY","startX","startY","targetX","targetY","dirX","dirY","magnitude","abs","sqrt","timeToCircle","circleBoundaryX","circleBoundaryY","$8ad3900a5eaa809f$var$computePlayerDistanceToCircleBoundary","playerDistToCenter","hasSolution","t1","t2","$8ad3900a5eaa809f$var$solveQuadraticEquation","console","warn","Infinity","NaN","objectFutureX","objectFutureY","A","B","C","discriminant","sqrtD","$f63559ac802d5fcd$export$dbee4337d98e454a","forEach","object","index","isIntercepted","beginPath","arc","PI","fillStyle","fill","value","textAlign","textBaseline","font","fillText","lineWidth","strokeStyle","stroke","isSelected","selectionIndex","AISelectionIndex","sequence","indexOf","arrowLength","angle","atan2","endX","cos","endY","sin","moveTo","lineTo","arrowheadAngle","leftX","arrowheadLength","leftY","rightX","rightY","closePath","$f63559ac802d5fcd$export$941190eab9b1306e","complete","naturalWidth","drawImage","imageWidth","imageHeight","$f63559ac802d5fcd$export$c49e56ba66dbb552","width","height","save","clip","$f63559ac802d5fcd$export$a1c066623ac679d3","restore","clearRect","$a6e5cb9280750852$export$6ab2b06ec414ff32","$a6e5cb9280750852$var$updateObjectPositions","requestAnimationFrame","cancelAnimationFrame","innerHTML","addEventListener","$a120aba6070f2bcc$export$15e953eb503541f6","$a120aba6070f2bcc$export$5a2db02f125d5880","disabled","style","display","$dc92eabc72a21f55$export$bf38e2ded79c0319","solutions","bestSolutionIndex","maxValue","numSequences","copyObjects","structuredClone","copyPlayer","totalValue","moves","isInProgress","j","objectNow","success","timeToIntercept","interceptPosX","interceptPosY","finalDistanceAtCircle","playerSpeed","travelTime","move","$0fe02c20e88f8b06$var$processMove","obj","push","$0fe02c20e88f8b06$var$computeObjectValue","weight","scaledValue","solution","$0fe02c20e88f8b06$var$normalizeSolutionValues","sol","totalValueProp","log","toFixed","$a6e5cb9280750852$export$462d46774333aa1c","isInCircle","valNow","status","$a6e5cb9280750852$var$updatePlayerPosition","currentMove","currentObject","frame","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","findIndex","hypot","distance","removeEventListener","$2b6e161c9edcf319$var$urlParams","searchParams","URLSearchParams","window","location","search","params","key","entries","undefined","Number","arr","k","result","helper","currentPermutation","includes","Array","from","_","a","c","m","blur","isEasyMode","numObjects","specialFinalRadius","offsetX","specialSpeed","$fdab832ea30fed45$var$createSpecialObjects","specialObjects","newObject","$fdab832ea30fed45$var$generateRandomObject","dx","dy","isValid","randomDirection","randomSpeed","randomRadius","randomStartAngle","finalx","finaly","finalRadius","alpha","beta","sampleGamma","shape","u","d","pow","find","matchingIndex","permutation","every","feedbackPath","isLocal","hostname","setTimeout"],"version":3,"file":"index.b925dbbc.js.map"}